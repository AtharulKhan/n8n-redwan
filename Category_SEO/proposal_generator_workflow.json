{
  "name": "AI Website Scraper to Proposal Generator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-proposal",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "proposal-generator"
    },
    {
      "parameters": {
        "jsCode": "// Configuration for web scraping\nconst websiteUrl = $input.first().json.websiteUrl || 'https://example.com';\nconst maxPages = Math.min($input.first().json.maxPages || 15, 15);\nconst useApify = $input.first().json.useApify || false;\n\n// Initialize scraping configuration\nconst scrapingConfig = {\n  baseUrl: websiteUrl,\n  maxPages: maxPages,\n  useApify: useApify,\n  visitedUrls: new Set(),\n  pagesToScrape: [websiteUrl],\n  scrapedContent: []\n};\n\n// If using Apify, prepare the configuration\nif (useApify) {\n  return {\n    json: {\n      useApify: true,\n      apifyConfig: {\n        startUrls: [{ url: websiteUrl }],\n        maxRequestsPerCrawl: maxPages,\n        linkSelector: 'a[href]',\n        pseudoUrls: [\n          {\n            purl: websiteUrl.replace(/https?:\\/\\//, '') + '/**',\n            method: 'GET'\n          }\n        ],\n        keepUrlFragments: false,\n        proxyConfiguration: {\n          useApifyProxy: true\n        }\n      },\n      websiteUrl: websiteUrl\n    }\n  };\n} else {\n  // For native scraping, return URLs to process\n  return {\n    json: {\n      useApify: false,\n      baseUrl: websiteUrl,\n      maxPages: maxPages,\n      currentPage: 1,\n      urlsToScrape: [websiteUrl]\n    }\n  };\n}"
      },
      "id": "config_scraper",
      "name": "Configure Scraper",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.useApify }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check_apify",
      "name": "Check Apify",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "url": "https://api.apify.com/v2/acts/apify~website-content-crawler/runs",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "",
              "value": "={{ JSON.stringify($json.apifyConfig) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "apify_scraper",
      "name": "Apify Web Scraper",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "apify_api_key",
          "name": "Apify API"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.urlsToScrape[$json.currentPage - 1] }}",
        "options": {
          "timeout": 10000,
          "followRedirects": true
        }
      },
      "id": "http_scraper",
      "name": "HTTP Scraper",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [850, 400]
    },
    {
      "parameters": {
        "extractionValues": {
          "values": [
            {
              "key": "title",
              "cssSelector": "title",
              "returnValue": "text"
            },
            {
              "key": "headings",
              "cssSelector": "h1, h2, h3",
              "returnValue": "text",
              "multiple": true
            },
            {
              "key": "paragraphs",
              "cssSelector": "p",
              "returnValue": "text",
              "multiple": true
            },
            {
              "key": "links",
              "cssSelector": "a[href]",
              "returnValue": "attribute",
              "attribute": "href",
              "multiple": true
            },
            {
              "key": "metaDescription",
              "cssSelector": "meta[name='description']",
              "returnValue": "attribute",
              "attribute": "content"
            }
          ]
        },
        "options": {}
      },
      "id": "html_extract",
      "name": "Extract HTML Content",
      "type": "n8n-nodes-base.htmlExtract",
      "typeVersion": 1,
      "position": [1050, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process scraped content and prepare for next iteration\nconst items = $input.all();\nconst allContent = [];\nconst allLinks = new Set();\nconst baseUrl = items[0].json.baseUrl || '';\nconst maxPages = items[0].json.maxPages || 15;\nlet currentPage = items[0].json.currentPage || 1;\n\n// Collect content from all items\nitems.forEach(item => {\n  const content = {\n    url: item.json.url || baseUrl,\n    title: item.json.title || '',\n    headings: item.json.headings || [],\n    paragraphs: item.json.paragraphs || [],\n    metaDescription: item.json.metaDescription || ''\n  };\n  \n  allContent.push(content);\n  \n  // Collect links for crawling\n  if (item.json.links && Array.isArray(item.json.links)) {\n    item.json.links.forEach(link => {\n      // Filter and normalize links\n      if (link && link.startsWith('/')) {\n        link = new URL(link, baseUrl).href;\n      }\n      if (link && link.startsWith(baseUrl)) {\n        allLinks.add(link);\n      }\n    });\n  }\n});\n\n// Prepare next batch of URLs to scrape\nconst urlsToScrape = Array.from(allLinks).slice(0, maxPages - currentPage);\n\nreturn {\n  json: {\n    scrapedContent: allContent,\n    totalPagesScraped: currentPage,\n    remainingPages: maxPages - currentPage,\n    nextUrlsToScrape: urlsToScrape,\n    allContentCollected: allContent\n  }\n};"
      },
      "id": "process_content",
      "name": "Process Scraped Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 400]
    },
    {
      "parameters": {
        "jsCode": "// Combine all scraped content for AI processing\nconst allContent = $input.first().json.allContentCollected || [];\nconst websiteUrl = $input.first().json.websiteUrl || $input.first().json.baseUrl || '';\n\n// Create a comprehensive content summary\nlet contentSummary = {\n  websiteUrl: websiteUrl,\n  totalPagesAnalyzed: allContent.length,\n  compiledContent: ''\n};\n\n// Compile content into a structured format\nallContent.forEach((page, index) => {\n  contentSummary.compiledContent += `\\n\\n--- Page ${index + 1}: ${page.url} ---\\n`;\n  contentSummary.compiledContent += `Title: ${page.title}\\n`;\n  \n  if (page.metaDescription) {\n    contentSummary.compiledContent += `Description: ${page.metaDescription}\\n`;\n  }\n  \n  if (page.headings && page.headings.length > 0) {\n    contentSummary.compiledContent += `\\nKey Topics:\\n`;\n    page.headings.slice(0, 10).forEach(heading => {\n      contentSummary.compiledContent += `- ${heading}\\n`;\n    });\n  }\n  \n  if (page.paragraphs && page.paragraphs.length > 0) {\n    contentSummary.compiledContent += `\\nContent Summary:\\n`;\n    const relevantParagraphs = page.paragraphs\n      .filter(p => p && p.length > 50)\n      .slice(0, 5);\n    relevantParagraphs.forEach(para => {\n      contentSummary.compiledContent += `${para.substring(0, 200)}...\\n`;\n    });\n  }\n});\n\nreturn {\n  json: contentSummary\n};"
      },
      "id": "prepare_ai_input",
      "name": "Prepare AI Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a professional business consultant and proposal writer specializing in executive summaries and business analysis. Your task is to analyze website content and create the first part of a comprehensive business proposal."
            },
            {
              "role": "user",
              "content": "Based on the following website analysis, create PART 1 of a business proposal (sections 1-5 only):\n\n{{ $json.compiledContent }}\n\nGenerate the following sections in professional markdown:\n\n## 1. Executive Summary\n- Brief overview of the client's business (2-3 paragraphs)\n- Key opportunities identified (3-5 bullet points)\n- Proposed value proposition (1-2 paragraphs)\n- Expected impact and ROI summary\n\n## 2. Understanding of Your Business\n- Current services/products offered (detailed list)\n- Target audience analysis with demographics\n- Market positioning and competitive landscape\n- Identified strengths and unique advantages\n- Current digital presence assessment\n\n## 3. Industry Analysis\n- Market trends affecting the business\n- Competitor analysis and benchmarking\n- Industry best practices\n- Growth opportunities in the sector\n\n## 4. Opportunities & Challenges\n- Pain points discovered (5-7 specific issues)\n- Areas for immediate improvement\n- Competitive advantages to leverage\n- Market opportunities to capture\n- Risk factors and mitigation strategies\n\n## 5. Strategic Recommendations Overview\n- High-level strategic direction\n- Priority areas for focus\n- Quick wins vs. long-term initiatives\n- Resource allocation suggestions\n\nFormat with clear headers, bullet points, and professional language. Be specific and data-driven where possible."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 2500
        }
      },
      "id": "ai_part1",
      "name": "AI Part 1: Executive & Analysis",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1650, 200],
      "credentials": {
        "openAiApi": {
          "id": "openai_api",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a professional business consultant specializing in solution design and implementation planning. Your task is to create detailed solutions and implementation strategies for business proposals."
            },
            {
              "role": "user",
              "content": "Based on the following website analysis, create PART 2 of a business proposal (sections 6-10 only):\n\n{{ $json.compiledContent }}\n\nGenerate the following sections in professional markdown:\n\n## 6. Proposed Solutions\n- **Solution 1: [Name]**\n  - Description and objectives\n  - Implementation approach\n  - Expected outcomes\n  - Success metrics\n- **Solution 2: [Name]**\n  - Description and objectives\n  - Implementation approach\n  - Expected outcomes\n  - Success metrics\n- **Solution 3: [Name]**\n  - Description and objectives\n  - Implementation approach\n  - Expected outcomes\n  - Success metrics\n\n## 7. Implementation Timeline\n- **Phase 1: Foundation (Weeks 1-2)**\n  - Discovery and planning\n  - Stakeholder alignment\n  - Initial setup tasks\n  - Deliverables\n- **Phase 2: Core Development (Weeks 3-6)**\n  - Main implementation tasks\n  - Key milestones\n  - Testing and iteration\n  - Deliverables\n- **Phase 3: Optimization (Weeks 7-8)**\n  - Performance tuning\n  - User training\n  - Documentation\n  - Deliverables\n- **Phase 4: Launch & Scale (Week 9+)**\n  - Go-live activities\n  - Monitoring setup\n  - Continuous improvement\n  - Success criteria\n\n## 8. Investment & Pricing Options\n- **Starter Package**\n  - Services included\n  - Investment: $X,XXX - $X,XXX/month\n  - Best for: [target audience]\n  - ROI timeline\n- **Growth Package**\n  - Everything in Starter plus:\n  - Additional services\n  - Investment: $X,XXX - $XX,XXX/month\n  - Best for: [target audience]\n  - ROI timeline\n- **Enterprise Package**\n  - Complete solution including:\n  - Premium services\n  - Investment: Custom pricing\n  - Best for: [target audience]\n  - ROI timeline\n\n## 9. Expected Results & ROI\n- **Month 1-3: Foundation**\n  - Expected improvements\n  - Measurable KPIs\n- **Month 4-6: Growth**\n  - Performance targets\n  - Revenue impact\n- **Month 7-12: Scale**\n  - Long-term benefits\n  - Total ROI projection\n\n## 10. Success Metrics & KPIs\n- Traffic metrics and targets\n- Conversion rate improvements\n- Revenue growth projections\n- Customer satisfaction scores\n- Operational efficiency gains\n\nBe specific with timelines, pricing ranges, and measurable outcomes."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 2500
        }
      },
      "id": "ai_part2",
      "name": "AI Part 2: Solutions & Implementation",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1650, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai_api",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "resource": "text",
        "operation": "message",
        "modelId": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are a professional business consultant specializing in client relations and proposal closing. Your task is to create compelling closing sections that drive action and build trust."
            },
            {
              "role": "user",
              "content": "Based on the following website analysis, create PART 3 of a business proposal (sections 11-16 only):\n\n{{ $json.compiledContent }}\n\nGenerate the following sections in professional markdown:\n\n## 11. Why Choose Us\n- **Proven Track Record**\n  - Years of experience\n  - Success stories and case studies\n  - Industry recognition\n- **Our Unique Approach**\n  - Methodology overview\n  - What sets us apart\n  - Innovation and technology\n- **Expert Team**\n  - Team qualifications\n  - Industry expertise\n  - Dedicated support model\n- **Client Success Stories**\n  - Case study 1: [Industry] - [Result]\n  - Case study 2: [Industry] - [Result]\n  - Case study 3: [Industry] - [Result]\n\n## 12. Our Guarantees\n- **Performance Guarantee**\n  - Specific commitments\n  - Success criteria\n- **Service Level Agreement**\n  - Response times\n  - Support availability\n  - Quality standards\n- **Risk Mitigation**\n  - Money-back guarantee terms\n  - Performance bonds\n  - Insurance and liability\n\n## 13. Client Testimonials\n- Featured success stories (2-3 detailed testimonials)\n- Results achieved for similar businesses\n- Client satisfaction metrics\n- References available upon request\n\n## 14. Next Steps\n- **Immediate Actions**\n  1. Schedule discovery call (45 minutes)\n  2. Review proposal together (60 minutes)\n  3. Finalize scope and terms\n  4. Sign agreement and begin onboarding\n- **Timeline to Start**\n  - Week 1: Contract and planning\n  - Week 2: Kickoff and setup\n  - Week 3: Begin implementation\n- **What We Need From You**\n  - Access requirements\n  - Team involvement\n  - Decision timeline\n\n## 15. Terms & Conditions\n- Contract duration options\n- Payment terms and schedules\n- Cancellation policy\n- Intellectual property rights\n- Confidentiality agreement\n- Liability and indemnification\n\n## 16. Contact Information & Call to Action\n- **Your Dedicated Team**\n  - Project Manager: [Name] - [Contact]\n  - Technical Lead: [Name] - [Contact]\n  - Account Manager: [Name] - [Contact]\n- **How to Proceed**\n  - Accept proposal: [CTA button/link]\n  - Schedule consultation: [Calendar link]\n  - Request modifications: [Contact form]\n- **Special Offer**\n  - Limited time incentive\n  - Early bird discount\n  - Bonus services for quick decision\n\n**Proposal Validity:** 30 days from date of issue\n**Confidentiality:** This proposal is confidential and proprietary\n\nInclude strong calls to action and create urgency while maintaining professionalism."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 2500
        }
      },
      "id": "ai_part3",
      "name": "AI Part 3: Closing & CTA",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [1650, 400],
      "credentials": {
        "openAiApi": {
          "id": "openai_api",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine all three AI responses into one comprehensive proposal\nconst part1 = $('AI Part 1: Executive & Analysis').first().json.message || $('AI Part 1: Executive & Analysis').first().json.content || '';\nconst part2 = $('AI Part 2: Solutions & Implementation').first().json.message || $('AI Part 2: Solutions & Implementation').first().json.content || '';\nconst part3 = $('AI Part 3: Closing & CTA').first().json.message || $('AI Part 3: Closing & CTA').first().json.content || '';\n\n// Combine all parts with proper formatting\nlet fullProposal = `# Comprehensive Business Proposal\\n\\n`;\nfullProposal += `---\\n\\n`;\nfullProposal += `## Table of Contents\\n\\n`;\nfullProposal += `1. [Executive Summary](#1-executive-summary)\\n`;\nfullProposal += `2. [Understanding of Your Business](#2-understanding-of-your-business)\\n`;\nfullProposal += `3. [Industry Analysis](#3-industry-analysis)\\n`;\nfullProposal += `4. [Opportunities & Challenges](#4-opportunities--challenges)\\n`;\nfullProposal += `5. [Strategic Recommendations Overview](#5-strategic-recommendations-overview)\\n`;\nfullProposal += `6. [Proposed Solutions](#6-proposed-solutions)\\n`;\nfullProposal += `7. [Implementation Timeline](#7-implementation-timeline)\\n`;\nfullProposal += `8. [Investment & Pricing Options](#8-investment--pricing-options)\\n`;\nfullProposal += `9. [Expected Results & ROI](#9-expected-results--roi)\\n`;\nfullProposal += `10. [Success Metrics & KPIs](#10-success-metrics--kpis)\\n`;\nfullProposal += `11. [Why Choose Us](#11-why-choose-us)\\n`;\nfullProposal += `12. [Our Guarantees](#12-our-guarantees)\\n`;\nfullProposal += `13. [Client Testimonials](#13-client-testimonials)\\n`;\nfullProposal += `14. [Next Steps](#14-next-steps)\\n`;\nfullProposal += `15. [Terms & Conditions](#15-terms--conditions)\\n`;\nfullProposal += `16. [Contact Information & Call to Action](#16-contact-information--call-to-action)\\n\\n`;\nfullProposal += `---\\n\\n`;\n\n// Add Part 1 content\nfullProposal += `# Part I: Executive Summary & Business Analysis\\n\\n`;\nfullProposal += part1;\nfullProposal += `\\n\\n---\\n\\n`;\n\n// Add Part 2 content\nfullProposal += `# Part II: Solutions & Implementation Strategy\\n\\n`;\nfullProposal += part2;\nfullProposal += `\\n\\n---\\n\\n`;\n\n// Add Part 3 content\nfullProposal += `# Part III: Partnership & Next Steps\\n\\n`;\nfullProposal += part3;\n\nreturn {\n  json: {\n    proposal: fullProposal,\n    websiteUrl: $('Prepare AI Input').first().json.websiteUrl || '',\n    totalPagesAnalyzed: $('Prepare AI Input').first().json.totalPagesAnalyzed || 0\n  }\n};"
      },
      "id": "combine_proposals",
      "name": "Combine AI Responses",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format the final proposal and add metadata\nconst proposal = $input.first().json.proposal || '';\nconst websiteUrl = $input.first().json.websiteUrl || '';\nconst timestamp = new Date().toISOString();\n\n// Add header and footer to the proposal\nlet finalProposal = `# Custom Business Proposal\\n\\n`;\nfinalProposal += `**Generated for:** ${websiteUrl}\\n`;\nfinalProposal += `**Date:** ${new Date().toLocaleDateString()}\\n`;\nfinalProposal += `**Proposal ID:** ${Math.random().toString(36).substring(7).toUpperCase()}\\n\\n`;\nfinalProposal += `---\\n\\n`;\nfinalProposal += proposal;\nfinalProposal += `\\n\\n---\\n\\n`;\nfinalProposal += `*This proposal was generated using AI-powered analysis of your website content. `;\nfinalProposal += `All recommendations are tailored specifically to your business needs.*\\n\\n`;\nfinalProposal += `**Validity:** This proposal is valid for 30 days from the date of generation.\\n\\n`;\nfinalProposal += `**Confidentiality:** This proposal contains confidential information and is intended solely for the addressee.\\n`;\n\nreturn {\n  json: {\n    proposal: finalProposal,\n    filename: `proposal_${websiteUrl.replace(/https?:\\/\\//, '').replace(/[^a-z0-9]/gi, '_')}_${Date.now()}.md`,\n    websiteUrl: websiteUrl,\n    timestamp: timestamp\n  }\n};"
      },
      "id": "format_proposal",
      "name": "Format Final Proposal",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2050, 300]
    },
    {
      "parameters": {
        "operation": "text",
        "dataPropertyName": "data",
        "fileName": "={{ $json.filename }}",
        "options": {}
      },
      "id": "convert_to_file",
      "name": "Convert to Downloadable File",
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1,
      "position": [2250, 300]
    },
    {
      "parameters": {
        "respondWith": "binary",
        "outputBinaryPropertyName": "data",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Disposition",
                "value": "=attachment; filename=\"{{ $json.filename }}\""
              }
            ]
          }
        }
      },
      "id": "webhook_response",
      "name": "Return Proposal File",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2450, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Configure Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Scraper": {
      "main": [
        [
          {
            "node": "Check Apify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Apify": {
      "main": [
        [
          {
            "node": "Apify Web Scraper",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify Web Scraper": {
      "main": [
        [
          {
            "node": "Prepare AI Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Scraper": {
      "main": [
        [
          {
            "node": "Extract HTML Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract HTML Content": {
      "main": [
        [
          {
            "node": "Process Scraped Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Scraped Content": {
      "main": [
        [
          {
            "node": "Prepare AI Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Input": {
      "main": [
        [
          {
            "node": "AI Part 1: Executive & Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Part 2: Solutions & Implementation",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Part 3: Closing & CTA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Part 1: Executive & Analysis": {
      "main": [
        [
          {
            "node": "Combine AI Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Part 2: Solutions & Implementation": {
      "main": [
        [
          {
            "node": "Combine AI Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Part 3: Closing & CTA": {
      "main": [
        [
          {
            "node": "Combine AI Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine AI Responses": {
      "main": [
        [
          {
            "node": "Format Final Proposal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Final Proposal": {
      "main": [
        [
          {
            "node": "Convert to Downloadable File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Downloadable File": {
      "main": [
        [
          {
            "node": "Return Proposal File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "staticData": null,
  "meta": {
    "templateId": "custom-proposal-generator",
    "description": "Scrapes up to 15 pages from a website and generates a custom business proposal using AI",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "AI",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "name": "Web Scraping",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "name": "Proposal Generation",
      "createdAt": "2024-01-01T00:00:00.000Z"
    }
  ]
}