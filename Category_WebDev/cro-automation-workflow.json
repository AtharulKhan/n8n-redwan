{
  "name": "Website Mockup Lead Gen",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=# **üß© Master CRO Audit Prompt (Universal & Modular)**\n\n# SYSTEM / ROLE\n\nYou are a senior **Conversion Rate Optimisation (CRO) consultant** with deep expertise in:\n- UX / usability, behavioural psychology, persuasion design\n- Technical SEO, performance optimisation\n- E-commerce & lead-generation funnels (B2B + B2C hybrid)\n- Major platforms: Shopify, BigCommerce, WordPress, HubSpot, Headless stacks\n\nYou have internalised best practices from **Making Websites Win, Conversion Optimization (K. Ash), Baymard Institute, CXL, Nielsen Norman Group**.\n\nYour role: Deliver a **CRO + SEO audit & optimisation roadmap** for the given site/page, maximising conversions based on the provided content.\n\n# MISSION\n\nPerform a **full CRO + UX + Technical SEO audit** comparing our website with the competitor.\n\n## Our Website Content: {{$item(0).$node[\"Get Scraped Content1\"].json[\"html\"]}}\n\nOur Screenshot: {{$item(0).$node[\"Get Screenshot1\"].json[\"screenshotUrl\"]}}\n\nCompetitor Screenshot: {{$item(0).$node[\"Get Screenshot Competitor1\"].json[\"screenshotUrl\"]}}\n\n# OBJECTIVES\n\n1. Audit the **visitor journey**: traffic_source ‚Üí Home/Landing ‚Üí Category/PDP/Offer ‚Üí Cart/Form ‚Üí Checkout/Thank-you ‚Üí Post-purchase\n2. Benchmark against **competitor** + **best-in-class CRO patterns**\n3. Identify **gaps in persuasion, UX, trust, tech, performance**\n4. Deliver a **prioritised roadmap** with effort tags and starter copy/code\n\n# RUBRIC (Score Each 1‚Äì10)\n\n1. Clarity of Value Proposition\n2. Relevance to Audience Intent\n3. Motivation & Emotional Resonance\n4. Friction (forms, checkout, PDP steps)\n5. Distraction (nav clutter, competing CTAs)\n6. Trust & Credibility (design, proof, policies)\n7. Momentum (progress cues, funnel flow)\n8. Social Proof & Persuasion triggers\n9. Urgency / Scarcity Cues\n10. Accessibility, Performance, & Mobile UX\n\n# TASKS\n\n## 1 ¬∑ Heuristic & Analytics Audit [ALL]\n- Apply 10-point rubric to both sites\n- Flag dead-ends, loops, tech snags\n- Highlight mobile/responsive issues\n\n## 2 ¬∑ Technical SEO & Performance [ALL]\n- Sitemap & robots check\n- Schema coverage\n- Speed metrics & fixes\n\n## 3 ¬∑ Competitor & Best-Practice Comparison [ALL]\n- Extract 3 persuasive tactics from competitor\n- List 3 transferrable CRO/UX wins from industry benchmarks\n\n## 4 ¬∑ Gap Analysis [ALL]\n\n| Element | Issue | KPI Impact | Evidence | Fix | ICE Score | Code? | LG/EC/HY |\n\n## 5 ¬∑ CRO Blueprint\n\n- **Phase 0 ‚Äì Quick Wins (1‚Äì2 weeks)**\n- **Phase 1 ‚Äì UX & Trust Builders (4‚Äì6 weeks)**\n- **Phase 2 ‚Äì Experiments (8‚Äì12 weeks)**\n- **Phase 3 ‚Äì Scale & Automation (3‚Äì6 months)**\n\nEach action must:\n- Tag effort [NC]=No-Code / [LC]=Low-Code / [HC]=High-Code\n- Tag funnel type [LG]/[EC]/[HY]\n- Include **starter copy / code snippet**\n\n## 6 ¬∑ Measurement Plan\n\n- **E-com metrics:** CVR, AOV, Revenue/Session, Checkout success\n- **Lead-gen metrics:** Form CVR, SQO%, Pipeline value\n- **Shared metrics:** Bounce, Speed, Repeat conversion\n\n# OUTPUT FORMAT\n\nDeliver the audit in **Markdown**:\n\n```markdown\n# Executive Summary\n\n## 1. CRO & UX Audit\n‚Äì Rubric scores + commentary for both sites\n\n## 2. Competitor Insights\n‚Äì Wins & transferrable patterns\n\n## 3. Gap Analysis\n‚Äì Table format comparing us vs competitor\n\n## 4. Prioritised Blueprint\n‚Äì Phase 0 to Phase 3, tagged by [NC]/[LC]/[HC] + [LG]/[EC]/[HY]\n\n## 5. Measurement & Next Steps\n‚Äì KPIs, reporting cadence\n```",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [368, 2864],
      "id": "ff91beaa-c64b-4900-90da-ad4a83776c3f",
      "name": "CRO Audit Analysis",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-chat",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [368, 3104],
      "id": "aa8f7473-251e-4d21-b480-cd5c907ac0f6",
      "name": "OpenRouter CRO Audit",
      "credentials": {
        "openRouterApi": {
          "id": "Dtio4gg1Ugl5jouc",
          "name": "OpenRouter Final"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "==You are an expert front-end developer and CRO specialist. Create a COMPLETE, PRODUCTION-READY landing page (single HTML file with inline CSS in <style>) that implements the CRO audit recommendations and visual analysis.\n\n# Inputs (from upstream nodes)\n## CRO Audit (primary guide for messaging, quick wins, friction reduction)\n{{ $json.text }}\n\n## Client Website Content (for value prop, service details, and copy source)\n{{ $item(0).$node[\"Get Scraped Content1\"].json[\"html\"] || \"No content scraped\" }}\n\n## Visual References\n- **Client Screenshot (BRAND PRIORITY ‚Äî THEME/COLOUR/STYLE)**\nUse this to extract brand palette, theme, typography cues, and visual identity. Apply these consistently across the page.\nClient Screenshot URL: {{ $item(0).$node[\"Get Screenshot1\"].json[\"screenshotUrl\"] || \"\" }}\n\n- **Competitor Screenshot (STRUCTURE PRIORITY ‚Äî LAYOUT/FLOW)**\nUse this as the **primary structural model**: mimic section order, grouping, spacing rhythm, and CRO patterns that improve conversion. Adapt to the client‚Äôs messaging and offering; do not copy text or brand.\nCompetitor Screenshot URL: {{ $item(0).$node[\"Get Screenshot Competitor1\"].json[\"screenshotUrl\"] || \"\" }}\n\n- **Website Structure We Want You to Follow (STRUCTURE LAYOUT)**\nUse this as the **primary layout**: mimic section order, grouping, spacing rhythm, and CRO patterns that improve conversion. Adapt to the client‚Äôs messaging and offering; Use clients colour theme\nStructure Layout: {{ $item(0).$node[\"Website Structure\"].json[\"text\"] || \"No content scraped\" }}\n\n# Mission\nOutput a SINGLE, self-contained HTML document that:\n1) Implements **all high-priority / Phase 0 Quick Wins** from the CRO audit.\n2) **Prioritizes the competitor landing page layout and flow** as the core structure to mimic (section order, grouping, component patterns).\n3) Applies the **client‚Äôs brand colours, theme, and stylistic cues** from the client screenshot.\n4) Reflects the client‚Äôs unique product/service and value proposition (from scraped content + audit insights).\n5) Is **unique and non-generic**: competitor-inspired structure + client branding + CRO audit messaging.\n\n# Suggested Structure (guideline, not rigid)\n> Treat this as a suggested scaffold. When in doubt, **follow the competitor‚Äôs structure first**, then style with the client brand.\n- **Head:** Semantic HTML5; <title>/<meta name=\"description\"> optimized per audit; Open Graph & Twitter; JSON-LD schema (Organization + WebSite + BreadcrumbList, or LocalBusiness/Product/Service).\n- **Hero (Above-the-Fold):** Audit-driven value prop + benefit subhead; primary CTA (clear, benefit-led, aria-label); trust bullets/badges; lightweight visual container. Follow competitor hero composition (e.g., left copy/right visual) if present.\n- **Social Proof:** Client/partner logos, ratings, 1‚Äì2 short testimonials (placeholder copy ok); risk-reversal/guarantee if audit recommends.\n- **Offer / Service Blocks:** Skimmable cards; iconography; features ‚Üí benefits; persuasive microcopy; momentum cues (steps/progress) if audit calls for it.\n- **Lead Form or CTA Cluster:** 3‚Äì5 fields max; inline validation (HTML5 + aria-live); clear privacy note; button states (loading/disabled); success confirmation.\n- **Urgency / Scarcity:** Only if audit recommends; subtle banner/ticker with aria-live=\"polite\".\n- **FAQ / Objection Handling:** 4‚Äì6 accordions with schema.org FAQ markup.\n- **Footer:** Contact, social, basic nav, secondary CTA.\n\n# Accessibility & Performance\n- WCAG AA+ contrast; :focus-visible; skip-to-content link.\n- Respect prefers-reduced-motion; subtle transitions only.\n- Images lazy-load; width/height set to avoid CLS.\n- Minimal vanilla JS only (form validation, accordion toggles). No external libraries.\n\n# CSS Requirements\n- **Palette from Client Screenshot** (NOT competitor): define at :root  \n  --brand-800, --brand-700, --brand-600, --brand-500, --brand-100, --accent, --bg, --text, --muted, --success, --warning, --error.\n- Mobile-first responsive grid/flex; clear type scale; generous spacing.\n- Card components with soft shadows, rounded corners.\n- Button, input, alert, badge systems; tactile hover/focus micro-interactions.\n\n# Technical SEO\n- Single <h1>; descriptive <h2>/<h3> hierarchy.\n- Internal anchor links to key sections.\n- JSON-LD per most relevant entity type (Organization/WebSite/BreadcrumbList or LocalBusiness/Product/Service).\n\n# Output Constraints\n- **Return ONLY one complete HTML document**:\n  - <!DOCTYPE html>\n  - <html lang=\"en\">\n  - <head> with inline <style> (no external CSS)\n  - <body> with all sections\n- No markdown, no commentary.\n- Use semantic placeholders where assets are unknown (e.g., data- attributes). Layout must remain presentable.\n- Keep DOM lean; avoid unnecessary wrappers.\n- The structure of the landing page is primarily based on the competitor screenshot. Mimic the competitor. \n- The design of the output should be based on the clients landing page. The primary and secondary colours, extract from the clients landing page.\n\n# Copy Guidance\n- Rewrite headlines, subheads, and CTAs per audit (clear, specific, benefit-driven).\n- Replace jargon with outcomes and proof; front-load benefits.\n- Conversational, reassuring microcopy in/around forms.\n- CTA text communicates outcome (‚ÄúGet My Plan‚Äù, ‚ÄúBook Strategy Call‚Äù).\n\n# Deliverable\nProduce a **single, production-ready HTML file** (inline CSS in <style>) that:\n- **Mimics the competitor‚Äôs site structure** (layout & flow) as the primary guide,\n- **Uses the client screenshot for theme, colour, and style**,\n- **Implements the CRO audit quick wins**,\n- Is unique, conversion-optimized, responsive, accessible, and fast.\n- User \"Structure Layout:\" for the layout and structure of the website.\n",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [1152, 2864],
      "id": "8c5a7689-06da-4ae5-8814-30bad523e55d",
      "name": "Landing Page Generator",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-pro",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [1152, 3104],
      "id": "02d82412-a7e0-450a-a60a-c8ae1ffe4217",
      "name": "OpenRouter Landing Page",
      "credentials": {
        "openRouterApi": {
          "id": "Dtio4gg1Ugl5jouc",
          "name": "OpenRouter Final"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 30,
              "unit": "minutes"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "1UcFd0YCSd0Nyraqp4esI3tdz89c6SGn2mZTwTi7liCY",
          "mode": "list",
          "cachedResultName": "Yaseer Web Dev Lead Gen",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1UcFd0YCSd0Nyraqp4esI3tdz89c6SGn2mZTwTi7liCY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Master",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1UcFd0YCSd0Nyraqp4esI3tdz89c6SGn2mZTwTi7liCY/edit#gid=0"
        },
        "options": {}
      },
      "id": "f8662df3-5dc0-49c7-bd4e-616ac42d939c",
      "name": "Google Sheets Trigger1",
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [-1616, 2864],
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "WH4ACZX7gzUnAQBj",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.Scrape }}",
              "operation": "contains",
              "value2": "Yes"
            }
          ]
        }
      },
      "id": "9053ae82-a65f-4a79-a919-ed232bb87f4d",
      "name": "Check Positive Status1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [-1408, 2864]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/apify~website-content-crawler/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startUrls\": [\n    {\n      \"url\": \"{{ $json[\"Website URL\"] }}\"\n    }\n  ],\n  \"crawlerType\": \"playwright:chrome\",\n  \"includeHtml\": true,\n  \"saveHtml\": true,\n  \"saveMarkdown\": true,\n  \"maxCrawlDepth\": 0,\n  \"maxCrawlPages\": 1,\n  \"proxyConfiguration\": {\n    \"useApifyProxy\": true,\n    \"apifyProxyGroups\": [\"RESIDENTIAL\"]\n  }\n}",
        "options": {}
      },
      "id": "355d3f08-e003-4911-bad6-71793369f162",
      "name": "Apify Content Scraper1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-1104, 2736],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 3000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "pyzMvLcpWk9lob5o",
          "name": "Header Auth account"
        },
        "apifyApi": {
          "id": "nl77x5MzcpCop3FV",
          "name": "Apify account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/apify~screenshot-url/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"delay\": 0,\n    \"proxy\": {\n        \"useApifyProxy\": true,\n        \"apifyProxyGroups\": [\n            \"RESIDENTIAL\"\n        ]\n    },\n    \"scrollToBottom\": true,\n    \"urls\": [\n        {\n            \"url\": \"{{ $json[\"Website URL\"] }}\",\n            \"method\": \"GET\"\n        }\n    ],\n    \"waitUntil\": \"domcontentloaded\",\n    \"waitUntilNetworkIdleAfterScroll\": false\n}",
        "options": {}
      },
      "id": "e462d656-6e33-4134-9669-6b981067f36c",
      "name": "Apify Screenshot1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-1104, 2960],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 3000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "pyzMvLcpWk9lob5o",
          "name": "Header Auth account"
        },
        "apifyApi": {
          "id": "nl77x5MzcpCop3FV",
          "name": "Apify account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "minutes"
      },
      "id": "e708abed-b25f-4737-abb1-9f766c5fe5bb",
      "name": "Wait for Processing1",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [-608, 2864],
      "webhookId": "3de86376-a620-45ce-9a77-d6d1e6065c22"
    },
    {
      "parameters": {
        "url": "={{ \"https://api.apify.com/v2/actor-runs/\" \n    + $item(0).$node[\"Apify Content Scraper1\"].json.data.id \n    + \"/dataset/items?format=json&clean=true\" }}\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "id": "20c71c0b-7014-4a1e-8c0d-0cd0118f0aca",
      "name": "Get Scraped Content1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-416, 2736],
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "pyzMvLcpWk9lob5o",
          "name": "Header Auth account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $item(0).$node[\"Apify Screenshot1\"].json.data.defaultDatasetId \n    ? \"https://api.apify.com/v2/datasets/\" \n      + $node[\"Apify Screenshot1\"].json.data.defaultDatasetId \n      + \"/items?format=json&clean=true\"\n    : \"\" }}\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "75ec1f08-0f65-41ca-8ebc-bd7406e3fcbb",
      "name": "Get Screenshot1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-416, 2864],
      "credentials": {
        "httpHeaderAuth": {
          "id": "pyzMvLcpWk9lob5o",
          "name": "Header Auth account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "name": "=Client_{{ $item(0).$node[\"Check Positive Status1\"].json[\"Client Name\"] || \"No content scraped\" }}_{{ $now.format('yyyy-MM-dd_HH-mm') }}.html",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $node[\"Create Client Folder1\"].json[\"id\"] }}\n",
          "mode": "id"
        },
        "options": {}
      },
      "id": "f9e3dab3-8930-4e66-ae40-4650fe3e54ba",
      "name": "Save to Google Drive1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [1696, 2864],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ySzWN5yRZbSL8sUw",
          "name": "Google Drive - Redwan"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentId": {
          "__rl": true,
          "value": "1UcFd0YCSd0Nyraqp4esI3tdz89c6SGn2mZTwTi7liCY",
          "mode": "list",
          "cachedResultName": "Web Dev Lead Gen",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1UcFd0YCSd0Nyraqp4esI3tdz89c6SGn2mZTwTi7liCY/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Master",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1UcFd0YCSd0Nyraqp4esI3tdz89c6SGn2mZTwTi7liCY/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Drive File": "={{ $json.driveFileUrl }}",
            "Drive File Download": "={{ $json.downloadLink }}",
            "Scrape": "Done",
            "Website URL": "=",
            "ID": "={{ $item(0).$node[\"Check Positive Status1\"].json[\"ID\"] || \"No content scraped\" }}"
          },
          "matchingColumns": ["ID"],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Client Name",
              "displayName": "Client Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Website URL",
              "displayName": "Website URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Competitor URL",
              "displayName": "Competitor URL",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Drive File",
              "displayName": "Drive File",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Drive File Download",
              "displayName": "Drive File Download",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Scrape",
              "displayName": "Scrape",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_number",
              "displayName": "row_number",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "readOnly": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "f654fc95-7632-4a86-865c-2bbe62fa8a8d",
      "name": "Update Google Sheet1",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [2160, 2864],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XTfYeEotsbhc5dxV",
          "name": "Google Sheets account - Redwan"
        }
      }
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ \"Website Crawl_\" + $json[\"Client Name\"] + \"_\" + $now.format('yyyy-MM-dd') }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1tcw3FuriQYaqjQCL16x1uDjn_25qkoJG",
          "mode": "list",
          "cachedResultName": "Yaseer Web Dev Lead Gen",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1tcw3FuriQYaqjQCL16x1uDjn_25qkoJG"
        },
        "options": {}
      },
      "id": "622409af-e190-416e-98f6-1f7689520d1e",
      "name": "Create Client Folder1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [-1104, 2544],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "ySzWN5yRZbSL8sUw",
          "name": "Google Drive - Redwan"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Build Google Drive links from json.id\n// Input: items with item.json.id (from Google Drive node output)\n// Output: adds driveFileUrl, webViewLink, downloadLink to item.json\n\nconst items = $input.all().map((item) => {\n  item.json = item.json || {};\n\n  // Try a few common id fields just in case\n  const id =\n    item.json.id ||\n    item.json.fileId ||\n    item.json.file_id ||\n    $json.id;\n\n  if (!id) {\n    // Surface a helpful error that includes the item index\n    throw new Error(`Missing file id on item: ${JSON.stringify(item.json)}`);\n  }\n\n  const base = 'https://drive.google.com/file/d/';\n  const safeId = encodeURIComponent(id);\n\n  // Pretty file URL (opens Drive file page)\n  item.json.driveFileUrl = `${base}${safeId}`;\n\n  // Typical \"Open in Drive\" view link\n  item.json.webViewLink = `${base}${safeId}/view?usp=sharing`;\n\n  // Direct-ish download link pattern used by Google\n  item.json.downloadLink = `https://drive.google.com/uc?id=${safeId}&export=download`;\n\n  return item;\n});\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1936, 2864],
      "id": "74faa987-6e09-4737-8b93-6d8e845dca51",
      "name": "Create Share Link1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.apify.com/v2/acts/apify~screenshot-url/runs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "apifyApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"delay\": 0,\n    \"proxy\": {\n        \"useApifyProxy\": true,\n        \"apifyProxyGroups\": [\n            \"RESIDENTIAL\"\n        ]\n    },\n    \"scrollToBottom\": true,\n    \"urls\": [\n        {\n            \"url\": \"{{ $json[\"Competitor URL\"] }}\",\n            \"method\": \"GET\"\n        }\n    ],\n    \"waitUntil\": \"domcontentloaded\",\n    \"waitUntilNetworkIdleAfterScroll\": false\n}",
        "options": {}
      },
      "id": "f2c2e55a-9d24-43ac-81c3-ddce033897e7",
      "name": "Apify Screenshot Competitor1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-1104, 3152],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 3000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "pyzMvLcpWk9lob5o",
          "name": "Header Auth account"
        },
        "apifyApi": {
          "id": "nl77x5MzcpCop3FV",
          "name": "Apify account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $item(0).$node[\"Apify Screenshot1\"].json.data.defaultDatasetId \n    ? \"https://api.apify.com/v2/datasets/\" \n      + $node[\"Apify Screenshot Competitor1\"].json.data.defaultDatasetId \n      + \"/items?format=json&clean=true\"\n    : \"\" }}\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "f174414a-f461-4539-8102-c8889bb49b91",
      "name": "Get Screenshot Competitor1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-416, 3008],
      "credentials": {
        "httpHeaderAuth": {
          "id": "pyzMvLcpWk9lob5o",
          "name": "Header Auth account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-144, 2848],
      "id": "6897560b-dd1e-41b3-8f69-793cabc77836",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Combine HTML from \"Landing Page Generator\" and emit as binary `data`\n\n// 1) Read the HTML produced by the Landing Page Generator\nlet html = $node[\"Landing Page Generator\"].json?.text || $json?.text || \"\";\n\nif (!html || typeof html !== \"string\" || html.length < 100) {\n  throw new Error(\"Landing Page HTML is missing or too short. Check the 'Landing Page Generator' node output.\");\n}\n\n// 2) Strip any accidental Markdown/code fences\nconst stripFences = (s) =>\n  s\n    .replace(/^\\s*```(?:html)?\\s*/i, \"\")\n    .replace(/\\s*```\\s*$/i, \"\");\n\n// Also strip generic triple backticks that might surround the whole doc\nhtml = html.trim();\nif (html.startsWith(\"```\")) html = stripFences(html);\n\n// 3) Ensure it's a complete HTML document (add minimal head/body if needed)\nconst containsDoctype = /<!DOCTYPE\\s+html>/i.test(html);\nconst containsHtmlTag = /<html[\\s>]/i.test(html);\n\nif (!containsHtmlTag) {\n  // Assume it's a fragment ‚Üí wrap it\n  html = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  <title>Landing Page</title>\n</head>\n<body>\n${html}\n</body>\n</html>`;\n} else if (!containsDoctype) {\n  // Add DOCTYPE if <html> exists but doctype is missing\n  html = `<!DOCTYPE html>\\n${html}`;\n}\n\n// 4) Final quick sanity checks\nif (!/^<!DOCTYPE html>/i.test(html) || !/<\\/html>\\s*$/i.test(html)) {\n  throw new Error(\"Final HTML does not look like a complete document after wrapping.\");\n}\n\n// 5) Build filename like Client_YYYY-MM-DD_HH-mm.html\nconst pad = (n) => String(n).padStart(2, \"0\");\nconst now = new Date();\nconst fileName = `Client_${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}_${pad(now.getHours())}-${pad(now.getMinutes())}.html`;\n\n// 6) Prepare output structure (json metadata + binary `data`)\nconst buffer = Buffer.from(html, \"utf8\");\nconst binaryData = await this.helpers.prepareBinaryData(buffer, fileName, \"text/html\");\n\nreturn [\n  {\n    json: {\n      fileName,\n      size: buffer.length,\n      validated: true,\n      timestamp: now.toISOString(),\n    },\n    binary: {\n      data: binaryData, // <-- The next Google Drive node should use \"Binary Property: data\"\n    },\n  },\n];\n"
      },
      "id": "2fea7c8f-1ead-4f3b-9916-d9c8346a95c0",
      "name": "Binary Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1472, 2864]
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-784, 2832],
      "id": "3f872b4a-1690-4b7a-b2db-c54d2906b3fe",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// Consolidate mixed items (scrape results, screenshots, errors) into ONE item\n// and expose clean fields for the LLM prompt:\n//\n//  Output JSON shape:\n//  {\n//    client: {\n//      url, html, markdown, text, metadata, screenshotUrl\n//    },\n//    competitor: {\n//      url, screenshotUrl\n//    },\n//    raw: { allItems, errors }   // optional debug\n//  }\n\nconst items = $input.all();\n\n// Helper: shallow clone (avoid mutating upstream)\nconst clone = (obj) => JSON.parse(JSON.stringify(obj || {}));\n\n// Buckets\nlet client = { url: null, html: null, markdown: null, text: null, metadata: null, screenshotUrl: null };\nlet competitor = { url: null, screenshotUrl: null };\nconst errors = [];\n\n// Utilities\nconst getHost = (u) => {\n  try { return new URL(u).host; } catch { return null; }\n};\nconst looksLikeScrape = (j) =>\n  j && (j.html || j.markdown || j.text || j.metadata);\nconst looksLikeScreenshot = (j) =>\n  j && (j.screenshotUrl && (j.url || j.startUrl));\n\n// First, gather all candidates\nconst scrapeCandidates = [];\nconst screenshotCandidates = [];\n\nfor (const it of items) {\n  const j = it.json || {};\n\n  if (j.error) {\n    errors.push(clone(j));\n    continue;\n  }\n\n  if (looksLikeScrape(j)) {\n    scrapeCandidates.push(clone(j));\n  } else if (looksLikeScreenshot(j)) {\n    screenshotCandidates.push(clone(j));\n  }\n}\n\n// Heuristics to pick client vs competitor\n// If two distinct hosts exist in screenshots, treat the first host we see as \"client\" and the second as \"competitor\".\n// (Works with your example: butterflydigital.ca = client, newdgtl.com = competitor)\nconst uniqBy = (arr, keyFn) => {\n  const seen = new Set();\n  return arr.filter(x => {\n    const k = keyFn(x);\n    if (k && !seen.has(k)) { seen.add(k); return true; }\n    return false;\n  });\n};\n\nconst ssWithHost = screenshotCandidates\n  .map(s => ({...s, host: getHost(s.url || s.startUrl)}))\n  .filter(s => !!s.host);\n\nconst dedupScreens = uniqBy(ssWithHost, s => s.screenshotUrl || (s.url || s.startUrl));\n\nlet clientHost = null;\nlet competitorHost = null;\n\nif (dedupScreens.length) {\n  clientHost = dedupScreens[0]?.host || null;\n  // find a different host to mark as competitor\n  const other = dedupScreens.find(s => s.host !== clientHost);\n  competitorHost = other?.host || null;\n}\n\n// Assign screenshot URLs\nfor (const s of dedupScreens) {\n  const url = s.url || s.startUrl || null;\n\n  if (clientHost && s.host === clientHost && !client.screenshotUrl) {\n    client.screenshotUrl = s.screenshotUrl;\n    client.url = url;\n  } else if (competitorHost && s.host === competitorHost && !competitor.screenshotUrl) {\n    competitor.screenshotUrl = s.screenshotUrl;\n    competitor.url = url;\n  }\n}\n\n// Pick best client scrape content matching client host if possible, else first scrape\nconst scrapeForHost = (host) =>\n  scrapeCandidates.find(c => getHost(c.url || c.crawl?.loadedUrl || c.metadata?.canonicalUrl) === host);\n\nlet clientScrape =\n  (clientHost && scrapeForHost(clientHost)) ||\n  scrapeCandidates[0] ||\n  null;\n\nif (clientScrape) {\n  client.html = clientScrape.html || null;\n  client.markdown = clientScrape.markdown || null;\n  client.text = clientScrape.text || null;\n  client.metadata = clientScrape.metadata || null;\n  client.url = client.url || clientScrape.url || clientScrape.crawl?.loadedUrl || clientScrape.metadata?.canonicalUrl || null;\n}\n\n// If we still don't have competitor screenshot but we have another screenshot host, use it\nif (!competitor.screenshotUrl && dedupScreens.length > 1) {\n  const candidate = dedupScreens.find(s => s.host !== clientHost);\n  if (candidate) {\n    competitor.screenshotUrl = candidate.screenshotUrl;\n    competitor.url = candidate.url || candidate.startUrl || null;\n  }\n}\n\n// Final single consolidated item\nreturn [{\n  json: {\n    client,\n    competitor,\n    raw: {\n      allItems: items.map(i => i.json || {}),\n      errors\n    }\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [112, 2864],
      "id": "a1ec0e07-cb2b-43f2-92c6-7a7780495f69",
      "name": "Consolidate Inputs"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# **üß© Website Structure Blueprint Prompt (Client + Competitor)**\n\n# SYSTEM / ROLE\n\nYou are a senior **Conversion Rate Optimisation (CRO) & UX consultant** with deep expertise in:\n- Persuasive UX, behavioural psychology, web usability\n- High-converting ecommerce & lead-gen layouts\n- Major platforms: Shopify, BigCommerce, WordPress, HubSpot, Headless stacks\n- Best-practices from Baymard Institute, CXL, NN/g, Making Websites Win\n\nYour role: Deliver a **website structure blueprint** that combines the **client‚Äôs brand identity** with the **competitor‚Äôs proven layout structure**.\n\n---\n\n# INPUTS\n\n- **Client Screenshot URL**: {{ $item(0).$node[\"Get Screenshot1\"].json[\"screenshotUrl\"] || \"\" }}  \n- **Competitor Screenshot URL**: {{ $item(0).$node[\"Get Screenshot Competitor1\"].json[\"screenshotUrl\"] || \"\" }}\n\n---\n\n# OBJECTIVES\n\n1. Use **Client Screenshot** to extract:\n   - Brand colors, fonts, styling, tone\n   - Core text snippets / headings / identity\n\n2. Use **Competitor Screenshot** to extract:\n   - Page structure (hero, sections, CTAs, footer)\n   - Interaction patterns (hover states, menus, sticky elements, animations)\n\n3. Deliver a **section-by-section website plan**:\n   - Hero (headline, CTA, layout)\n   - Each subsequent section (value props, features, testimonials, offers, CTA placements)\n   - Footer (trust signals, navigation, socials, policies)\n\n4. Ensure output is **adapted for the client**:\n   - Layout inspired by competitor\n   - Styling, content, and copy adapted from client brand\n\n---\n\n# OUTPUT FORMAT\n\nDeliver the audit in **Markdown**:\n\n```markdown\n# Website Structure Blueprint\n\n## Brand & Theme\n‚Äì Extracted color palette from Client Screenshot  \n‚Äì Fonts & styling notes  \n‚Äì Tone of voice   \n\n## Hero Section (Above the Fold)\n‚Äì Layout, imagery, headline, CTA  \n‚Äì Client copy suggestions  \n\n## Section 2: [Competitor-Inspired Layout]\n‚Äì Structural description  \n‚Äì Client-adapted copy/design  \n\n## Section 3: [Competitor-Inspired Layout]\n‚Äì Structural description  \n‚Äì Client-adapted copy/design  \n\n... (repeat for each competitor-inspired section)\n\n## Footer\n‚Äì Structure (navigation, legal, social, trust signals)  \n‚Äì Client-specific adaptation\n",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [752, 2864],
      "id": "9cb5ccec-76e8-412f-9e3c-8e77e4e47d3f",
      "name": "Website Structure",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-chat",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [752, 3104],
      "id": "8202f85d-8869-47d1-bc20-553d9843253e",
      "name": "OpenRouter Website Structure",
      "credentials": {
        "openRouterApi": {
          "id": "Dtio4gg1Ugl5jouc",
          "name": "OpenRouter Final"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "CRO Audit Analysis": {
      "main": [
        [
          {
            "node": "Website Structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter CRO Audit": {
      "ai_languageModel": [
        [
          {
            "node": "CRO Audit Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Landing Page Generator": {
      "main": [
        [
          {
            "node": "Binary Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Landing Page": {
      "ai_languageModel": [
        [
          {
            "node": "Landing Page Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger1": {
      "main": [
        [
          {
            "node": "Check Positive Status1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Positive Status1": {
      "main": [
        [
          {
            "node": "Apify Content Scraper1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Apify Screenshot1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Client Folder1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Apify Screenshot Competitor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify Content Scraper1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Apify Screenshot1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Wait for Processing1": {
      "main": [
        [
          {
            "node": "Get Scraped Content1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Screenshot1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Screenshot Competitor1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Scraped Content1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Screenshot1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Save to Google Drive1": {
      "main": [
        [
          {
            "node": "Create Share Link1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Client Folder1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Share Link1": {
      "main": [
        [
          {
            "node": "Update Google Sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Apify Screenshot Competitor1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Get Screenshot Competitor1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Consolidate Inputs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Binary Payload": {
      "main": [
        [
          {
            "node": "Save to Google Drive1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Wait for Processing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidate Inputs": {
      "main": [
        [
          {
            "node": "CRO Audit Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Website Structure": {
      "main": [
        [
          {
            "node": "Landing Page Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Website Structure": {
      "ai_languageModel": [
        [
          {
            "node": "Website Structure",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "edce887e-30f6-4cf0-9e14-92081f22582c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "09dac3b1fd535c8a2e81b8c333863b71134f03a2d7b0c5fb38cc1b81fda4ce0b"
  },
  "id": "WCZQmWApfKlHhcxX",
  "tags": [
    {
      "createdAt": "2025-09-18T05:26:14.259Z",
      "updatedAt": "2025-09-18T05:26:14.259Z",
      "id": "NOm6TtxWrHrS9w6F",
      "name": "apify"
    },
    {
      "createdAt": "2025-09-18T05:26:22.254Z",
      "updatedAt": "2025-09-18T05:26:22.254Z",
      "id": "R3GdjqCS0Hao0SAY",
      "name": "web dev"
    },
    {
      "createdAt": "2025-09-18T05:26:10.571Z",
      "updatedAt": "2025-09-18T05:26:10.571Z",
      "id": "jnpx2dopFoUHwyNf",
      "name": "lead generation"
    }
  ]
}
