{
  "name": "Notion Projects to Slack Client Channels | Dev Board",
  "nodes": [
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09ATAUEPGE",
          "mode": "list",
          "cachedResultName": "client-simplifai"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1168, 96],
      "id": "2606c27c-334b-42d2-ade6-90896f46ee2e",
      "name": "Send Slack Message",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "8e81c3e7-0652-4667-9070-e147de4ea396",
      "name": "Format Slack Message",
      "type": "n8n-nodes-base.code",
      "position": [928, 96],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [640, 336],
      "id": "d022b94f-5049-4502-8baa-6c8b6bd08129",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [448, 320],
      "id": "9084d69a-c481-4e2f-aba9-23dcb9305cfb",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [448, 96],
      "id": "4c6ac8d2-3b8f-40e0-bf62-4b3ea41230c9",
      "name": "Generate AI Summary"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 144],
      "id": "70300045-e4f3-4831-bfb0-4c03c4328c2f",
      "name": "Combine Project + Slack Data"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ATAUEPGE",
          "mode": "list",
          "cachedResultName": "client-simplifai"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-304, 48],
      "id": "09bea0a8-8eb5-49dc-a51d-fcc7aef49b50",
      "name": "Get Slack Channel History",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-720, 288],
      "id": "08345d2c-9585-42d5-8765-0a0f648026fb",
      "name": "Merge Data"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-304, 288],
      "id": "6b22c74b-0a76-43a6-9b9b-fcbdd4661ae3",
      "name": "Aggregate Client Data"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-720, 16],
      "id": "b27cf4ba-2f34-4970-91e6-d9e3630cbd23",
      "name": "Get Child Blocks",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "SimplifAI"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1232, 96],
      "id": "1c33540a-1c17-4e64-b10b-c9c35ae05bda",
      "name": "Get Notion Database Pages",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "3c9f1508-fe70-4a04-8f6a-dea61628feee",
      "name": "Daily Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1552, 96],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [0, 144],
      "id": "fdea934b-a25f-4ca2-b3d8-dccc722dd582",
      "name": "Merge"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [576, 544],
      "id": "f77f54bc-eaa5-4dec-9f1f-d6e1733492b7",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - SimplifAI",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, -16],
      "typeVersion": 1,
      "id": "6b69b2d3-082b-4a36-8a97-a62356fff596",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09BHU139LY",
          "mode": "list",
          "cachedResultName": "client-bfd-yma"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1168, 912],
      "id": "3a754460-8347-442c-b111-24bab53873f8",
      "name": "Send Slack Message1",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "587baa21-7eba-48f8-b8c3-75d8437818a4",
      "name": "Format Slack Message1",
      "type": "n8n-nodes-base.code",
      "position": [928, 912],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [640, 1152],
      "id": "7f239e39-7d49-4178-8d6a-388d688c3ec8",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [448, 1136],
      "id": "82f03de2-c6ed-4455-88e1-f5702297dbe0",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [448, 912],
      "id": "8ef9a22e-4a94-44e4-b026-64da26bfb2be",
      "name": "Generate AI Summary1"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 960],
      "id": "609d501e-34f1-4b3a-a042-c0641f084582",
      "name": "Combine Project + Slack Data1"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09BHU139LY",
          "mode": "list",
          "cachedResultName": "client-bfd-yma"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-304, 864],
      "id": "02aded5f-265b-41e5-99c0-1e74be163271",
      "name": "Get Slack Channel History1",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-720, 1104],
      "id": "31119ff6-2bcd-4cef-a0aa-77d454c1c309",
      "name": "Merge Data1"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-304, 1104],
      "id": "ecf8a7d7-3e61-4841-a813-4c9c0e618683",
      "name": "Aggregate Client Data1"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-720, 832],
      "id": "44fc51e7-d662-400e-867d-7c90fe682604",
      "name": "Get Child Blocks1",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "YMA | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1232, 912],
      "id": "0cc5c5a8-15f5-4254-a433-e89b787ed2cf",
      "name": "Get Notion Database Pages1",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "3 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "99475b81-885f-4884-907b-fb0e30988d3f",
      "name": "Daily Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1552, 912],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [0, 960],
      "id": "be92e6c6-591e-407a-bbf4-d21946b9b46d",
      "name": "Merge1"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [576, 1360],
      "id": "f9a63c9c-dd37-4bd8-9f44-de85d25f2a27",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - YMA",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, 800],
      "typeVersion": 1,
      "id": "cc91f307-e1d5-46a1-8801-b6c77e5c56fd",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09B41AGM25",
          "mode": "list",
          "cachedResultName": "client-simplifai-johngollnick"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1184, 1776],
      "id": "0c1f6b0f-c813-4d6e-8593-cc32b49f9ad2",
      "name": "Send Slack Message2",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "3dae57b0-3b6e-47b8-9a68-3281ca4e804b",
      "name": "Format Slack Message2",
      "type": "n8n-nodes-base.code",
      "position": [944, 1776],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [656, 2016],
      "id": "b5130ff1-e52b-4d1e-8e29-b26f2d51c04d",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [464, 2000],
      "id": "8ae1a869-a0bf-41db-995c-f56341cbefee",
      "name": "OpenRouter Chat Model4",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [464, 1776],
      "id": "b939ac12-3d80-49b8-b59a-56d39b8753a3",
      "name": "Generate AI Summary2"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [272, 1824],
      "id": "af912e9a-1004-4ab8-878b-a979e005c348",
      "name": "Combine Project + Slack Data2"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09B41AGM25",
          "mode": "list",
          "cachedResultName": "client-simplifai-johngollnick"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-288, 1728],
      "id": "64ec47f9-c859-4926-8ac1-cd1007e76a65",
      "name": "Get Slack Channel History2",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-704, 1968],
      "id": "ac098ad2-00ee-4bd0-a7d6-3c05d0d11a83",
      "name": "Merge Data2"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-288, 1968],
      "id": "16c4a9b9-52f2-485a-a739-37a10c0bc4a7",
      "name": "Aggregate Client Data2"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-704, 1696],
      "id": "80fcd228-0ed7-4ea8-b0e6-ddb97934b311",
      "name": "Get Child Blocks2",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "John | SimplifAI"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1216, 1776],
      "id": "9b2272fc-e1b2-4186-8a60-c85aa91cf64b",
      "name": "Get Notion Database Pages2",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "5 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "08bee1ab-bd34-4781-8576-a0e882f2aa4b",
      "name": "Daily Schedule Trigger2",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1536, 1776],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [16, 1824],
      "id": "e810aeb0-edd9-46ac-aa4d-7c73ddccd946",
      "name": "Merge2"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [592, 2224],
      "id": "ebfd6579-369e-4d47-be6e-71a94f0d3e28",
      "name": "OpenRouter Chat Model5",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - John | SimplifAI",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1584, 1664],
      "typeVersion": 1,
      "id": "b71e41f9-870f-4d66-b605-36e7f13535c3",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09B4DW8VQR",
          "mode": "list",
          "cachedResultName": "client-wsi"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1184, 2688],
      "id": "dfe179ed-063c-4893-9b88-34b8df12b7eb",
      "name": "Send Slack Message3",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "0911f60e-5f3c-42f8-abee-53025260ead8",
      "name": "Format Slack Message3",
      "type": "n8n-nodes-base.code",
      "position": [944, 2688],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [656, 2928],
      "id": "9c1838db-5bc8-48af-9cec-3a9bb0883f47",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [464, 2912],
      "id": "4daec4cd-921d-4bba-bf75-bba4d00aba93",
      "name": "OpenRouter Chat Model6",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [464, 2688],
      "id": "569e9aaa-dd33-44cd-9d62-78b21aaad3fc",
      "name": "Generate AI Summary3"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [272, 2736],
      "id": "61b28349-edae-4c1a-963a-fda19628ba4b",
      "name": "Combine Project + Slack Data3"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09B4DW8VQR",
          "mode": "list",
          "cachedResultName": "client-wsi"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-288, 2640],
      "id": "914cbce2-9d82-4cf7-83bd-8611cae20484",
      "name": "Get Slack Channel History3",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-704, 2880],
      "id": "4130e299-fd37-4bf8-9726-1460f3a14206",
      "name": "Merge Data3"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-288, 2880],
      "id": "a10644c3-d0e8-4904-bb17-53f42da5dac6",
      "name": "Aggregate Client Data3"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-704, 2608],
      "id": "a8773d8c-6496-4975-8673-94b05a7039a4",
      "name": "Get Child Blocks3",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "WSI"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1216, 2688],
      "id": "5350305f-7d50-4e21-952c-81faee12c79b",
      "name": "Get Notion Database Pages3",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "7 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "18b9ba0c-9131-46f6-8276-4e591467d410",
      "name": "Daily Schedule Trigger3",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1536, 2688],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [16, 2736],
      "id": "f1814f18-1787-4ea8-a400-2a7aae20fed6",
      "name": "Merge3"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [592, 3136],
      "id": "67da8f50-b78f-4ad3-a3e4-a9f2bee358f6",
      "name": "OpenRouter Chat Model7",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - WSI",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1584, 2576],
      "typeVersion": 1,
      "id": "fbced2b0-03cf-4244-a233-c60c4b312613",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09AQ1X297X",
          "mode": "list",
          "cachedResultName": "client-ehn"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1184, 3440],
      "id": "eb9b56ea-cacc-49fb-a12f-69904b8a6f1f",
      "name": "Send Slack Message4",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "b870057a-f114-4b74-9e78-56615a7bc0fa",
      "name": "Format Slack Message4",
      "type": "n8n-nodes-base.code",
      "position": [944, 3440],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [656, 3680],
      "id": "d8e25376-6047-4967-b793-28a080f9cd5c",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [464, 3664],
      "id": "11eb34e8-1344-45d4-a78d-f66864d732a7",
      "name": "OpenRouter Chat Model8",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [464, 3440],
      "id": "82978b1d-c3fb-4ab7-8ab6-f007341d045b",
      "name": "Generate AI Summary4"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [272, 3488],
      "id": "03bc81c4-e630-4592-b328-3eb9dba129c5",
      "name": "Combine Project + Slack Data4"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09AQ1X297X",
          "mode": "list",
          "cachedResultName": "client-ehn"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-288, 3392],
      "id": "968d1f36-e241-4da4-acfb-d6868afd9c93",
      "name": "Get Slack Channel History4",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-704, 3632],
      "id": "91eb59cb-98d8-44b6-8128-f861ed1bb742",
      "name": "Merge Data4"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-288, 3632],
      "id": "02da9770-e830-4da1-a8d7-079d683777a2",
      "name": "Aggregate Client Data4"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-704, 3360],
      "id": "11a4bacb-505f-4ebb-91a7-4652361f4068",
      "name": "Get Child Blocks4",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "EHN"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1216, 3440],
      "id": "4bfa14c6-1003-458e-b7d5-16adf006591b",
      "name": "Get Notion Database Pages4",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "9 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "02ff3eba-2ae0-478c-921f-ae4e263f9ab8",
      "name": "Daily Schedule Trigger4",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1536, 3440],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [16, 3488],
      "id": "8af19de5-7e3d-42ae-bfd0-ba105d331d79",
      "name": "Merge4"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [592, 3888],
      "id": "bf9bf30e-75c3-4f4e-aa42-39262ff766c9",
      "name": "OpenRouter Chat Model9",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - EHN",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1584, 3328],
      "typeVersion": 1,
      "id": "f1b4180a-daf9-4df9-9cdd-aa62aba60881",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09AL3G59PV",
          "mode": "list",
          "cachedResultName": "client-mkgrowth-alareebi"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1184, 4224],
      "id": "53cc43df-363c-45d1-9bc0-382d29e91828",
      "name": "Send Slack Message5",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "d0b6a640-f064-4ac2-8dbc-375c10fa0c18",
      "name": "Format Slack Message5",
      "type": "n8n-nodes-base.code",
      "position": [944, 4224],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [656, 4464],
      "id": "a97263b1-4e79-47ee-9995-46a7e4027d38",
      "name": "Structured Output Parser5"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [464, 4448],
      "id": "10a79f24-cdef-4105-8c2b-4c4789ecce4f",
      "name": "OpenRouter Chat Model10",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [464, 4224],
      "id": "fe2c4e84-b73f-4482-a667-6f4ecc9f9563",
      "name": "Generate AI Summary5"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [272, 4272],
      "id": "afde62b1-8f44-40aa-a4e9-c3b602c18a55",
      "name": "Combine Project + Slack Data5"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09AL3G59PV",
          "mode": "list",
          "cachedResultName": "client-mkgrowth-alareebi"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-288, 4176],
      "id": "e92a1c76-ff55-4a58-a66d-123df20c6d76",
      "name": "Get Slack Channel History5",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-704, 4416],
      "id": "43798c75-d76b-44fb-b629-08f93ff595b9",
      "name": "Merge Data5"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-288, 4416],
      "id": "5014f32c-82e5-41d4-a691-ba3a4a8ed243",
      "name": "Aggregate Client Data5"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-704, 4144],
      "id": "e7f0bc93-c59d-48e7-8f01-6eb372f5af88",
      "name": "Get Child Blocks5",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "MJAExpress | MKGrowth"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1216, 4224],
      "id": "463a844a-b452-45c6-b127-26eecea1fccc",
      "name": "Get Notion Database Pages5",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "11 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "4d32b557-88b7-4670-a408-538b2171913a",
      "name": "Daily Schedule Trigger5",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1536, 4224],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [16, 4272],
      "id": "109d2ba2-20f1-4e44-b409-6c10f44c0294",
      "name": "Merge5"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [592, 4672],
      "id": "a08d13a5-c036-4983-9800-8eb22d100f5a",
      "name": "OpenRouter Chat Model11",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - WinkyMart Alareebi",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1584, 4112],
      "typeVersion": 1,
      "id": "e39ed1aa-a3f8-4115-8498-729cc681dd59",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09ADRTT2UF",
          "mode": "list",
          "cachedResultName": "client-mkgrowth-lavender"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1184, 5088],
      "id": "33c8b093-67f2-40eb-b6c7-9dfaa9cf8974",
      "name": "Send Slack Message6",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "5837c02c-f81f-41c2-902f-686a480117e5",
      "name": "Format Slack Message6",
      "type": "n8n-nodes-base.code",
      "position": [944, 5088],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [656, 5328],
      "id": "c9e9e2c4-a3d0-429c-9f42-55d91fe29ee3",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [464, 5312],
      "id": "67f4ce58-3f55-44df-8dc1-509cf506faaa",
      "name": "OpenRouter Chat Model12",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [464, 5088],
      "id": "9e33011e-db6c-4f63-963c-924e8e3d1bd2",
      "name": "Generate AI Summary6"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [272, 5136],
      "id": "9faea547-55a8-437c-9010-8513dcbbc017",
      "name": "Combine Project + Slack Data6"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ADRTT2UF",
          "mode": "list",
          "cachedResultName": "client-mkgrowth-lavender"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-288, 5040],
      "id": "3ccbfbb3-e955-408d-9ccc-f6cb033e5e0b",
      "name": "Get Slack Channel History6",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-704, 5280],
      "id": "db680349-68b0-4ec2-b6eb-b4cdb3df892f",
      "name": "Merge Data6"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-288, 5280],
      "id": "936a7a58-7825-4c16-be40-0bce10e37b1a",
      "name": "Aggregate Client Data6"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-704, 5008],
      "id": "05526672-bff1-4409-b556-8c1b920389df",
      "name": "Get Child Blocks6",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Lavender | MKGrowth"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1216, 5088],
      "id": "65e56416-3cc2-4362-92bb-b1b4f736f376",
      "name": "Get Notion Database Pages6",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "13 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "90ef5d98-af6e-4911-85f3-128d278505d0",
      "name": "Daily Schedule Trigger6",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1536, 5088],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [16, 5136],
      "id": "e9cbe1cb-bc95-4a53-968a-1a5dea1f8b3b",
      "name": "Merge6"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [592, 5536],
      "id": "a16bcf81-063a-435c-aa13-0da527b0a384",
      "name": "OpenRouter Chat Model13",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Lavender",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1584, 4976],
      "typeVersion": 1,
      "id": "f6270e26-2b98-4ad4-86a0-9fa0e7e1e755",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09ADBQUM7H",
          "mode": "list",
          "cachedResultName": "client-simplifai-richard"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1232, 5968],
      "id": "41d83869-cb00-44c0-a5e1-42139538277c",
      "name": "Send Slack Message7",
      "webhookId": "b86a4c74-7cca-4af6-808e-e1b8b5bdae09",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Dev Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "cc305a8f-c5db-47fc-8c86-a8ee27c208b7",
      "name": "Format Slack Message7",
      "type": "n8n-nodes-base.code",
      "position": [992, 5968],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [704, 6208],
      "id": "8021b485-c067-4858-89dc-dc6ac603a3c8",
      "name": "Structured Output Parser7"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [512, 6192],
      "id": "33d0ac83-7092-478e-83e0-9ac5b22b2d88",
      "name": "OpenRouter Chat Model14",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [512, 5968],
      "id": "e08ad99b-ddf4-45ec-b132-746144b56a1d",
      "name": "Generate AI Summary7"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [320, 6016],
      "id": "d338c0ce-d59c-4a2f-b865-e6c603795411",
      "name": "Combine Project + Slack Data7"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ADBQUM7H",
          "mode": "list",
          "cachedResultName": "client-simplifai-richard"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-240, 5920],
      "id": "5feed677-286e-4378-b6e9-f8d7d4f179a9",
      "name": "Get Slack Channel History7",
      "webhookId": "9655f307-9e6d-47eb-ae7f-b551404f8f48",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-656, 6160],
      "id": "24af3504-c977-4a4e-9d45-d4c6204512db",
      "name": "Merge Data7"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-240, 6160],
      "id": "192bec3a-d9eb-48bf-91e0-ee974a4fa977",
      "name": "Aggregate Client Data7"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-656, 5888],
      "id": "036507f2-553d-4921-a459-1e590650c2bd",
      "name": "Get Child Blocks7",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/23f6ab60b47980c18179e18a888e6c30?v=2406ab60b479808da84c000c91334e51",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Richard | SimplifAI"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1168, 5968],
      "id": "e866df73-6198-407b-92b7-bab19c2193a1",
      "name": "Get Notion Database Pages7",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "15 8 * * 0,2,4"
            }
          ]
        }
      },
      "id": "0e7808b0-5187-41d5-9a98-6117471bc54e",
      "name": "Daily Schedule Trigger7",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1488, 5968],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [64, 6016],
      "id": "422bb546-172b-4f5a-a551-d97f976ba8c3",
      "name": "Merge7"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [640, 6416],
      "id": "f39cd137-e95d-4e6a-bd4b-c1d6a53f9a97",
      "name": "OpenRouter Chat Model15",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Richard",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1536, 5856],
      "typeVersion": 1,
      "id": "85096c56-c21c-494d-957c-b8d4960b1da5",
      "name": "Sticky Note7"
    }
  ],
  "pinData": {},
  "connections": {
    "Format Slack Message": {
      "main": [
        [
          {
            "node": "Send Slack Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary": {
      "main": [
        [
          {
            "node": "Format Slack Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data": {
      "main": [
        [
          {
            "node": "Generate AI Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Aggregate Client Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message1": {
      "main": [
        [
          {
            "node": "Send Slack Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary1": {
      "main": [
        [
          {
            "node": "Format Slack Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data1": {
      "main": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data1": {
      "main": [
        [
          {
            "node": "Aggregate Client Data1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks1": {
      "main": [
        [
          {
            "node": "Merge Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages1": {
      "main": [
        [
          {
            "node": "Merge Data1",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message2": {
      "main": [
        [
          {
            "node": "Send Slack Message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary2": {
      "main": [
        [
          {
            "node": "Format Slack Message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data2": {
      "main": [
        [
          {
            "node": "Generate AI Summary2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data2": {
      "main": [
        [
          {
            "node": "Aggregate Client Data2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks2": {
      "main": [
        [
          {
            "node": "Merge Data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages2": {
      "main": [
        [
          {
            "node": "Merge Data2",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger2": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message3": {
      "main": [
        [
          {
            "node": "Send Slack Message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary3": {
      "main": [
        [
          {
            "node": "Format Slack Message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data3": {
      "main": [
        [
          {
            "node": "Generate AI Summary3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History3": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data3": {
      "main": [
        [
          {
            "node": "Aggregate Client Data3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data3": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks3": {
      "main": [
        [
          {
            "node": "Merge Data3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages3": {
      "main": [
        [
          {
            "node": "Merge Data3",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger3": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message4": {
      "main": [
        [
          {
            "node": "Send Slack Message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary4",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary4": {
      "main": [
        [
          {
            "node": "Format Slack Message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data4": {
      "main": [
        [
          {
            "node": "Generate AI Summary4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History4": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data4": {
      "main": [
        [
          {
            "node": "Aggregate Client Data4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data4": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks4": {
      "main": [
        [
          {
            "node": "Merge Data4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages4": {
      "main": [
        [
          {
            "node": "Merge Data4",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger4": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message5": {
      "main": [
        [
          {
            "node": "Send Slack Message5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary5",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary5": {
      "main": [
        [
          {
            "node": "Format Slack Message5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data5": {
      "main": [
        [
          {
            "node": "Generate AI Summary5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History5": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data5": {
      "main": [
        [
          {
            "node": "Aggregate Client Data5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data5": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks5": {
      "main": [
        [
          {
            "node": "Merge Data5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages5": {
      "main": [
        [
          {
            "node": "Merge Data5",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger5": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message6": {
      "main": [
        [
          {
            "node": "Send Slack Message6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary6",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary6": {
      "main": [
        [
          {
            "node": "Format Slack Message6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data6": {
      "main": [
        [
          {
            "node": "Generate AI Summary6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History6": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data6": {
      "main": [
        [
          {
            "node": "Aggregate Client Data6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data6": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks6": {
      "main": [
        [
          {
            "node": "Merge Data6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages6": {
      "main": [
        [
          {
            "node": "Merge Data6",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger6": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message7": {
      "main": [
        [
          {
            "node": "Send Slack Message7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser7": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary7",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary7": {
      "main": [
        [
          {
            "node": "Format Slack Message7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data7": {
      "main": [
        [
          {
            "node": "Generate AI Summary7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History7": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data7": {
      "main": [
        [
          {
            "node": "Aggregate Client Data7",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data7": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks7": {
      "main": [
        [
          {
            "node": "Merge Data7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages7": {
      "main": [
        [
          {
            "node": "Merge Data7",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger7": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "db708dc3-e759-4386-a33e-56aedd3b7a18",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "09dac3b1fd535c8a2e81b8c333863b71134f03a2d7b0c5fb38cc1b81fda4ce0b"
  },
  "id": "JmlhwZDjMVKMbmMp",
  "tags": [
    {
      "createdAt": "2025-08-17T20:00:58.638Z",
      "updatedAt": "2025-08-17T20:00:58.638Z",
      "id": "AcBnyW08HnPACs3E",
      "name": "Notion"
    },
    {
      "createdAt": "2025-08-17T23:12:38.701Z",
      "updatedAt": "2025-08-17T23:12:38.701Z",
      "id": "HTCzEWybixzofcrj",
      "name": "Slack Updates"
    },
    {
      "createdAt": "2025-08-17T20:01:00.158Z",
      "updatedAt": "2025-08-17T20:01:00.158Z",
      "id": "z1qNg60fa8ZXazIY",
      "name": "Slack"
    }
  ]
}
