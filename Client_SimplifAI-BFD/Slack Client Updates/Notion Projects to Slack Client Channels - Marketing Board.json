{
  "name": "Notion Projects to Slack Client Channels | Marketing Board",
  "nodes": [
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09AKJE93KM",
          "mode": "list",
          "cachedResultName": "client-evolutiontherapies"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1168, 96],
      "id": "8cf978df-2874-489c-92f6-5c62ad41e3d4",
      "name": "Send Slack Message",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "177d81fe-4ba0-4ccd-a537-14b018ef84c3",
      "name": "Format Slack Message",
      "type": "n8n-nodes-base.code",
      "position": [928, 96],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [640, 336],
      "id": "da039fcc-0d44-4dcd-ba13-217cef5e65fc",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [448, 320],
      "id": "dc2a097e-33a5-4669-9294-cfc69b573687",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [448, 96],
      "id": "5b5824f2-0a34-4181-83c2-1628c27784a9",
      "name": "Generate AI Summary"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 144],
      "id": "4393b65d-a59b-4cd4-8228-8cbd69081a29",
      "name": "Combine Project + Slack Data"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09AKJE93KM",
          "mode": "list",
          "cachedResultName": "client-evolutiontherapies"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-304, 48],
      "id": "574cf230-074a-4b61-bd22-a403314adf72",
      "name": "Get Slack Channel History",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-720, 288],
      "id": "eb7dd8ca-c972-4e90-9675-471e3b920dd2",
      "name": "Merge Data"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-304, 288],
      "id": "e76eee2f-2e55-4442-a873-b2ca98b4a162",
      "name": "Aggregate Client Data"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-720, 16],
      "id": "60f9c16e-9a4b-4372-ba15-630974a827ef",
      "name": "Get Child Blocks",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Evolution Therapies | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1232, 96],
      "id": "6b195b8f-cb82-4726-a8c2-e56743f7e4e0",
      "name": "Get Notion Database Pages",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * 1"
            }
          ]
        }
      },
      "id": "5b687861-809b-4703-81cf-066cb1211a4e",
      "name": "Daily Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1552, 96],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [0, 144],
      "id": "d8681144-5f63-4006-bba3-82eac901156e",
      "name": "Merge"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [576, 544],
      "id": "d4e80844-2553-4d12-aa21-3dc1817cbfeb",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Evolution Therapies",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, -16],
      "typeVersion": 1,
      "id": "32072a1d-20ff-4af0-b6a3-a4bb65b1819f",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09AKJPKKC3",
          "mode": "list",
          "cachedResultName": "client-416soccer"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1152, 880],
      "id": "fb188cbd-0fc8-48ed-a417-81ff49e19da5",
      "name": "Send Slack Message1",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "a7897ed2-12f5-4831-b12d-6950ee9d8bcc",
      "name": "Format Slack Message1",
      "type": "n8n-nodes-base.code",
      "position": [912, 880],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [624, 1120],
      "id": "5c7128e6-4a43-447a-a35c-ca9f06ac4704",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [432, 1104],
      "id": "bfcb428c-c146-4dc0-8dd7-81ba1ede11d2",
      "name": "OpenRouter Chat Model2",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [432, 880],
      "id": "2395793a-ae4d-46eb-8f92-8b2abfeb329d",
      "name": "Generate AI Summary1"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [240, 928],
      "id": "c6b16b0c-9337-46b8-8865-f277fee1af77",
      "name": "Combine Project + Slack Data1"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09AKJPKKC3",
          "mode": "list",
          "cachedResultName": "client-416soccer"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-320, 832],
      "id": "a7635ac0-b5af-4c26-a60a-0311f9bb41bc",
      "name": "Get Slack Channel History1",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-736, 1072],
      "id": "dd0850f4-5547-4825-8317-eb5d4b1025f5",
      "name": "Merge Data1"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-320, 1072],
      "id": "5bfceb07-2dde-4f4b-8b9c-426f223d42c3",
      "name": "Aggregate Client Data1"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-736, 800],
      "id": "638c625f-f654-4d23-ae6a-054bb4722f44",
      "name": "Get Child Blocks1",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "416 Soccer Club | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1248, 880],
      "id": "ef88898e-9b29-4297-b802-a616fa5a218d",
      "name": "Get Notion Database Pages1",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "5 9 * * 1"
            }
          ]
        }
      },
      "id": "96ce1971-fb92-4385-9618-92bd4a520ef1",
      "name": "Daily Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1568, 880],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-16, 928],
      "id": "7dc18105-afb6-4ba6-861f-a12b2ba2eacf",
      "name": "Merge1"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [560, 1328],
      "id": "2c09e3e7-9e44-440e-8f34-1b42aa6b5101",
      "name": "OpenRouter Chat Model3",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - 416 Soccer Club",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1616, 768],
      "typeVersion": 1,
      "id": "18868e21-d29b-462e-a14f-0f09737e110f",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09B3URTRAM",
          "mode": "list",
          "cachedResultName": "client-creativertical"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1168, 1792],
      "id": "56f82635-dde7-46d8-b319-7d37a71805d4",
      "name": "Send Slack Message2",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "2c00bfd3-2159-499b-ac3c-1b976d748cdc",
      "name": "Format Slack Message2",
      "type": "n8n-nodes-base.code",
      "position": [928, 1792],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [640, 2032],
      "id": "937cce38-4f04-4e1b-8261-a0d49a1af25c",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [448, 2016],
      "id": "2261d553-8658-4f24-b7b4-d49624618781",
      "name": "OpenRouter Chat Model4",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [448, 1792],
      "id": "6aed7b26-757b-462d-b508-1307b88fd83c",
      "name": "Generate AI Summary2"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 1840],
      "id": "299738f6-ece2-400f-ac4c-f7fa6602d65c",
      "name": "Combine Project + Slack Data2"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09B3URTRAM",
          "mode": "list",
          "cachedResultName": "client-creativertical"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-304, 1744],
      "id": "c143b1e5-7059-418f-8e70-32f339ef6823",
      "name": "Get Slack Channel History2",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-720, 1984],
      "id": "8b007344-7081-4798-b74e-901e298ad8b5",
      "name": "Merge Data2"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-304, 1984],
      "id": "ccbadada-8c29-404a-828a-399cbe1bebbe",
      "name": "Aggregate Client Data2"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-720, 1712],
      "id": "5536e459-6100-48ad-80f7-74e5b917ffcc",
      "name": "Get Child Blocks2",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Creativertical | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1232, 1792],
      "id": "bc18d7f8-a7e0-4758-acd6-caca29525a5f",
      "name": "Get Notion Database Pages2",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "7 9 * * 1"
            }
          ]
        }
      },
      "id": "1ce054dc-2e7f-495a-93f6-4c1d6c633f97",
      "name": "Daily Schedule Trigger2",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1552, 1792],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [0, 1840],
      "id": "44eb4ab4-ce06-413c-9545-fe43b2895942",
      "name": "Merge2"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [576, 2240],
      "id": "3d7f8c94-04ed-4a1b-8041-d423e9cf0f98",
      "name": "OpenRouter Chat Model5",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Creativertical",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, 1680],
      "typeVersion": 1,
      "id": "8129b8ed-7118-4f40-90fd-11050daea2a2",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09ARCYBYPL",
          "mode": "list",
          "cachedResultName": "client-farnborough"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1168, 2608],
      "id": "0006ddc8-43ee-4c1b-9d68-43c0dfd9b5f8",
      "name": "Send Slack Message3",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "b353c0bd-6489-4b25-809c-5ddd29867d4b",
      "name": "Format Slack Message3",
      "type": "n8n-nodes-base.code",
      "position": [928, 2608],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [640, 2848],
      "id": "b02c0f7e-5a29-403d-abd5-b8a5fc215308",
      "name": "Structured Output Parser3"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [448, 2832],
      "id": "77522447-55d1-4dee-9f6d-02aed2b27aaf",
      "name": "OpenRouter Chat Model6",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [448, 2608],
      "id": "37e8facf-2f28-4020-a4a6-991e9c027472",
      "name": "Generate AI Summary3"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, 2656],
      "id": "2b970314-d9ee-487b-8998-7eff5eb3b6b8",
      "name": "Combine Project + Slack Data3"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ARCYBYPL",
          "mode": "list",
          "cachedResultName": "client-farnborough"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-304, 2560],
      "id": "b57e93ea-3958-4e1b-9c1c-8a583f512c3b",
      "name": "Get Slack Channel History3",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-720, 2800],
      "id": "ed97744d-0634-4ef2-abf5-b6cf825300c5",
      "name": "Merge Data3"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-304, 2800],
      "id": "e067b49e-233a-4f65-8309-1d99605cdb60",
      "name": "Aggregate Client Data3"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-720, 2528],
      "id": "5bd54c9d-5c58-4954-bd3d-32dc99558c68",
      "name": "Get Child Blocks3",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Farnborough Cars | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1232, 2608],
      "id": "1bc67c92-343b-4450-8bbf-e6088e157dfc",
      "name": "Get Notion Database Pages3",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "9 9 * * 1"
            }
          ]
        }
      },
      "id": "004239a4-f3dd-45db-9d2f-758c8499a126",
      "name": "Daily Schedule Trigger3",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1552, 2608],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [0, 2656],
      "id": "a6681d18-0cf0-4a07-b9b6-d24ab387a4df",
      "name": "Merge3"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [576, 3056],
      "id": "9953943a-6525-4ab3-925b-3ab6b010497c",
      "name": "OpenRouter Chat Model7",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Farnborough Cars",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, 2496],
      "typeVersion": 1,
      "id": "ed06f5df-0cdc-4299-9748-3e4931ad15a1",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09B3V5KSPK",
          "mode": "list",
          "cachedResultName": "client-nuraelectric"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1184, 3504],
      "id": "a69bfbde-e872-40ab-8682-1fa4f5eff2ff",
      "name": "Send Slack Message4",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "50adc5e2-478e-49cf-b11a-44dc4c4c7ec5",
      "name": "Format Slack Message4",
      "type": "n8n-nodes-base.code",
      "position": [944, 3504],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [656, 3744],
      "id": "7fe1b767-69a5-4a4f-b29e-c7c853b4de47",
      "name": "Structured Output Parser4"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [464, 3728],
      "id": "2e2f0855-4ccc-40c9-ac6d-b1afc9f9bce3",
      "name": "OpenRouter Chat Model8",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [464, 3504],
      "id": "7dee30eb-0113-43f4-8621-eed5d94afebd",
      "name": "Generate AI Summary4"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [272, 3552],
      "id": "e7763702-dd75-46e8-9fa2-5413e37f4a99",
      "name": "Combine Project + Slack Data4"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ARCYBYPL",
          "mode": "list",
          "cachedResultName": "client-farnborough"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-288, 3456],
      "id": "4b32e9ae-4548-4cbe-865f-3ecb244632a1",
      "name": "Get Slack Channel History4",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-704, 3696],
      "id": "14ad3a98-941d-4a3d-9429-30edb9c830fb",
      "name": "Merge Data4"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-288, 3696],
      "id": "279d2628-dfac-43df-b962-0f1167bded73",
      "name": "Aggregate Client Data4"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-704, 3424],
      "id": "ca479617-04b5-4314-8fe7-653d127da395",
      "name": "Get Child Blocks4",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Nura Electric | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1216, 3504],
      "id": "b54bd04c-b31a-48f8-8edd-e3e0c0e1f8e5",
      "name": "Get Notion Database Pages4",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "11 9 * * 1"
            }
          ]
        }
      },
      "id": "a732d1e1-0aac-403c-9294-57ce1544cec7",
      "name": "Daily Schedule Trigger4",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1536, 3504],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [16, 3552],
      "id": "c71fb672-e449-4c79-a7b9-2dd598379624",
      "name": "Merge4"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [592, 3952],
      "id": "07ada373-a668-40ae-a461-01f5bd7584dd",
      "name": "OpenRouter Chat Model9",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Nura Electric",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1584, 3392],
      "typeVersion": 1,
      "id": "6ca72942-445e-463d-b775-02c05e5ab8d5",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09ADAW3TE3",
          "mode": "list",
          "cachedResultName": "client-tmm"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1216, 4304],
      "id": "975ab0b5-9b9e-43da-806b-e3fbf1c18f35",
      "name": "Send Slack Message5",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "57a24486-405a-4cf7-95ed-dafa440906a5",
      "name": "Format Slack Message5",
      "type": "n8n-nodes-base.code",
      "position": [976, 4304],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [688, 4544],
      "id": "7aedb049-6ec3-4470-8f7c-3a327b2e607c",
      "name": "Structured Output Parser5"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [496, 4528],
      "id": "b3a9e0fe-612b-46b9-a6a5-14c1c20e7042",
      "name": "OpenRouter Chat Model10",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [496, 4304],
      "id": "863a7193-cdfc-48e1-bbc9-da41bf755ca1",
      "name": "Generate AI Summary5"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [304, 4352],
      "id": "d822558f-f6ba-47d0-bf63-46204543637e",
      "name": "Combine Project + Slack Data5"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ADAW3TE3",
          "mode": "list",
          "cachedResultName": "client-tmm"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-256, 4256],
      "id": "c9daba7c-b29e-4cac-af82-9727b5d18e64",
      "name": "Get Slack Channel History5",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-672, 4496],
      "id": "32a661e6-ac3b-4c31-856d-40ccfa9a6116",
      "name": "Merge Data5"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-256, 4496],
      "id": "a3bb44ab-4d6a-46de-83d3-2133fc2b703b",
      "name": "Aggregate Client Data5"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-672, 4224],
      "id": "d868d7e6-21f9-420f-b9a5-e327308c7058",
      "name": "Get Child Blocks5",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "TMM | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1184, 4304],
      "id": "e97b6dd5-6a7a-44f8-abd5-a87e6b8eb75e",
      "name": "Get Notion Database Pages5",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "13 9 * * 1"
            }
          ]
        }
      },
      "id": "9712b38b-4c0c-47b4-90ee-00f376844ba1",
      "name": "Daily Schedule Trigger5",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1504, 4304],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [48, 4352],
      "id": "fbcef5b6-479f-494c-bed2-9fc6a912b990",
      "name": "Merge5"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [624, 4752],
      "id": "fdd99349-3106-4ad7-8fe7-8f41447eb322",
      "name": "OpenRouter Chat Model11",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - TMM",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1552, 4192],
      "typeVersion": 1,
      "id": "1f2f9c41-3c41-4a52-8b3d-d6285b901c09",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09APHPRXRB",
          "mode": "list",
          "cachedResultName": "client-adagio"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1216, 5072],
      "id": "5bff0d1c-1045-4c4d-87b5-2806ec565d3c",
      "name": "Send Slack Message6",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "f5625fcd-7c83-48f7-9350-5ce1c0a67dc5",
      "name": "Format Slack Message6",
      "type": "n8n-nodes-base.code",
      "position": [976, 5072],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [688, 5312],
      "id": "46e9dc6f-6a04-45a3-bfff-14a2a212179f",
      "name": "Structured Output Parser6"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [496, 5296],
      "id": "19e37506-784f-4be2-9559-609843b01311",
      "name": "OpenRouter Chat Model12",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [496, 5072],
      "id": "39bf0442-8455-4653-acd3-098ddac29bfb",
      "name": "Generate AI Summary6"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [304, 5120],
      "id": "726cfe35-ad72-4b48-bd65-9e3d7c56e3b3",
      "name": "Combine Project + Slack Data6"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09APHPRXRB",
          "mode": "list",
          "cachedResultName": "client-adagio"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-256, 5024],
      "id": "8e43fe98-de14-4ea6-90e6-1b179c07c5ec",
      "name": "Get Slack Channel History6",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-672, 5264],
      "id": "e2473a30-42c8-4ab2-9ddd-dfd84263606f",
      "name": "Merge Data6"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-256, 5264],
      "id": "f4487fcf-6cc1-4995-8689-c441ce1c1307",
      "name": "Aggregate Client Data6"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-672, 4992],
      "id": "846874e6-b57a-4105-a490-e9a2fd3755ca",
      "name": "Get Child Blocks6",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Adagio Villas | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1184, 5072],
      "id": "75c817c9-beee-4aed-87d9-93b4bb8b5cb1",
      "name": "Get Notion Database Pages6",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "15 9 * * 1"
            }
          ]
        }
      },
      "id": "743bc70d-8395-45d0-b1ce-7ebe69653ed7",
      "name": "Daily Schedule Trigger6",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1504, 5072],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [48, 5120],
      "id": "92dc893a-5067-452f-8d16-e41f92fc2235",
      "name": "Merge6"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [624, 5520],
      "id": "3b137aeb-ee37-4402-8383-a9af4b71591d",
      "name": "OpenRouter Chat Model13",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Adagio Villas",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1552, 4960],
      "typeVersion": 1,
      "id": "4f624ab7-0e9b-4676-8579-0afaa69c3f0e",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09ARD3GLHG",
          "mode": "list",
          "cachedResultName": "client-huron"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1232, 5872],
      "id": "e4a76a80-7634-4b9f-ad91-54689c78d1d1",
      "name": "Send Slack Message7",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "87f29bb8-0b13-44c0-ad88-7005af7aec1c",
      "name": "Format Slack Message7",
      "type": "n8n-nodes-base.code",
      "position": [992, 5872],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [704, 6112],
      "id": "d101d221-06ff-431d-b76e-a3ed68d91482",
      "name": "Structured Output Parser7"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [512, 6096],
      "id": "f5d40c78-9302-4524-8592-66d3cab3a442",
      "name": "OpenRouter Chat Model14",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [512, 5872],
      "id": "00f4b8af-d62e-48c3-a917-e78841051257",
      "name": "Generate AI Summary7"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [320, 5920],
      "id": "765cecc9-a7fc-4ef7-9755-ad928a9cfcf3",
      "name": "Combine Project + Slack Data7"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ARD3GLHG",
          "mode": "list",
          "cachedResultName": "client-huron"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-240, 5824],
      "id": "94dd02f8-6a4e-4c6a-ab49-89ce3dbfd0d8",
      "name": "Get Slack Channel History7",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-656, 6064],
      "id": "c2f7ee3e-9fcc-4be1-a436-f407812512d2",
      "name": "Merge Data7"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-240, 6064],
      "id": "bd9b9177-7a01-46ed-a666-e2be1839f27c",
      "name": "Aggregate Client Data7"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-656, 5792],
      "id": "19d8571c-d993-4fa6-a729-c748e2500575",
      "name": "Get Child Blocks7",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Adagio Villas | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1168, 5872],
      "id": "4253339d-6abd-46d1-a3f6-f11a5cc39e1c",
      "name": "Get Notion Database Pages7",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "17 9 * * 1"
            }
          ]
        }
      },
      "id": "1dd05851-b46a-41d0-b77d-6dc12f8d6a36",
      "name": "Daily Schedule Trigger7",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1488, 5872],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [64, 5920],
      "id": "1639eb10-97aa-4ead-aaa9-14f004cf1dd4",
      "name": "Merge7"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [640, 6320],
      "id": "5f7549f0-edba-44b7-9395-dae0d7239a91",
      "name": "OpenRouter Chat Model15",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Huron Industries",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1536, 5760],
      "typeVersion": 1,
      "id": "0e5bcc9b-1115-4614-9257-9d26c0e03cee",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09B3V0CP6D",
          "mode": "list",
          "cachedResultName": "client-ruleltd"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1248, 6640],
      "id": "45e1568a-a014-4d34-a8a2-69275cf7c91f",
      "name": "Send Slack Message8",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "774f3e70-dd8d-467e-8fcf-0d9d9e70345a",
      "name": "Format Slack Message8",
      "type": "n8n-nodes-base.code",
      "position": [1008, 6640],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [720, 6880],
      "id": "811e6048-89d1-4145-b829-a5fded20930c",
      "name": "Structured Output Parser8"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [528, 6864],
      "id": "61c5ae1b-88ff-450c-a455-6b352bf2715a",
      "name": "OpenRouter Chat Model16",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [528, 6640],
      "id": "032081b8-f4b4-4145-a0a9-2284e91fe099",
      "name": "Generate AI Summary8"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [336, 6688],
      "id": "bb692255-3893-4564-863f-df74877f9201",
      "name": "Combine Project + Slack Data8"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09B3V0CP6D",
          "mode": "list",
          "cachedResultName": "client-ruleltd"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-224, 6592],
      "id": "13f903d5-55bb-48d3-b705-66fb6483bfec",
      "name": "Get Slack Channel History8",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-640, 6832],
      "id": "d5088cbd-3be0-42a8-8a41-2a5935e78cba",
      "name": "Merge Data8"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-224, 6832],
      "id": "771eb710-2c4b-460c-9239-94aab1322447",
      "name": "Aggregate Client Data8"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-640, 6560],
      "id": "94fe5d8f-8ad8-49b7-86fe-5d20eb0004fb",
      "name": "Get Child Blocks8",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Rule LTD | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1152, 6640],
      "id": "5c36730e-79b2-4057-aa79-2248a99200d0",
      "name": "Get Notion Database Pages8",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "19 9 * * 1"
            }
          ]
        }
      },
      "id": "1669d573-49ca-4fab-a65a-0804142e3a90",
      "name": "Daily Schedule Trigger8",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1472, 6640],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [80, 6688],
      "id": "352eafef-c665-4bef-b368-59604272a36c",
      "name": "Merge8"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [656, 7088],
      "id": "d0942fac-eab3-4faa-bbc7-906586679ae8",
      "name": "OpenRouter Chat Model17",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Rule LTD",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1520, 6528],
      "typeVersion": 1,
      "id": "eb8dfb7a-8cf6-42c8-a5b5-825ddceaa6d1",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09AT2SQC3G",
          "mode": "list",
          "cachedResultName": "client-trackedtransport"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1280, 7360],
      "id": "f9fca992-ba93-44ae-995a-ffd86b959871",
      "name": "Send Slack Message9",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "daf45567-cbd3-4503-84ec-84c79f14849c",
      "name": "Format Slack Message9",
      "type": "n8n-nodes-base.code",
      "position": [1040, 7360],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [752, 7600],
      "id": "be810b3e-f7bf-4a39-8539-a69e0db2800d",
      "name": "Structured Output Parser9"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [560, 7584],
      "id": "ee09654b-06ee-4869-b3af-bf892f9e1982",
      "name": "OpenRouter Chat Model18",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [560, 7360],
      "id": "dfa4e234-4e64-41ba-8942-4d38636bf702",
      "name": "Generate AI Summary9"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [368, 7408],
      "id": "082a50de-c5a9-425d-913d-cc0794dbf90a",
      "name": "Combine Project + Slack Data9"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09AT2SQC3G",
          "mode": "list",
          "cachedResultName": "client-trackedtransport"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-192, 7312],
      "id": "5b82099f-260c-4cae-a632-76a31ec7e65d",
      "name": "Get Slack Channel History9",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-608, 7552],
      "id": "77977560-4996-420f-85e1-9cd256422945",
      "name": "Merge Data9"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-192, 7552],
      "id": "b6417d0b-9993-4c99-83f6-cc00143f43db",
      "name": "Aggregate Client Data9"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-608, 7280],
      "id": "3fa68647-2cdd-4eb3-a823-4a9ed4ca4344",
      "name": "Get Child Blocks9",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Tracked Transport | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1120, 7360],
      "id": "9cc8039c-964a-4e56-a2ec-a9593b137d8a",
      "name": "Get Notion Database Pages9",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "21 9 * * 1"
            }
          ]
        }
      },
      "id": "a4cd4b85-8175-47f0-a780-8c69b084c68a",
      "name": "Daily Schedule Trigger9",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1440, 7360],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [112, 7408],
      "id": "ad31690c-0671-42d2-b01b-d823682c0b30",
      "name": "Merge9"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [688, 7808],
      "id": "d6a79601-afec-402c-bf70-b46f0b0999fb",
      "name": "OpenRouter Chat Model19",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Tracked Transport",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1488, 7248],
      "typeVersion": 1,
      "id": "b1f602c4-cd71-4232-8158-731e4f5572f6",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09ARCMM410",
          "mode": "list",
          "cachedResultName": "client-utopiads"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1328, 8176],
      "id": "f48943ee-26ca-4060-b822-eef159a73cdc",
      "name": "Send Slack Message10",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "470148e3-2436-4f89-aefd-784de30349f6",
      "name": "Format Slack Message10",
      "type": "n8n-nodes-base.code",
      "position": [1088, 8176],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [800, 8416],
      "id": "ed646200-7ba1-46eb-80ef-4dc5f202f4de",
      "name": "Structured Output Parser10"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [608, 8400],
      "id": "5bef2d03-43cd-49bd-aca7-66cb0944c721",
      "name": "OpenRouter Chat Model20",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [608, 8176],
      "id": "d30447bd-a43d-419b-8266-84b0fd69c297",
      "name": "Generate AI Summary10"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [416, 8224],
      "id": "c4f7b33a-47a8-41e6-80db-b03d95034bc8",
      "name": "Combine Project + Slack Data10"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09ARCMM410",
          "mode": "list",
          "cachedResultName": "client-utopiads"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-144, 8128],
      "id": "8a9e9fbb-a7c0-4fea-812d-4a4e19e255cd",
      "name": "Get Slack Channel History10",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-560, 8368],
      "id": "56370d8d-3c30-4800-b349-74f6fd6b8609",
      "name": "Merge Data10"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-144, 8368],
      "id": "20766e99-6fb8-47e4-b43a-5a6ed7aef157",
      "name": "Aggregate Client Data10"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-560, 8096],
      "id": "a74810ef-69ed-4586-8bd7-95ae26b80f5c",
      "name": "Get Child Blocks10",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "Utopiads | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1072, 8176],
      "id": "61356db5-07ef-4475-bbc2-34e0f31568b1",
      "name": "Get Notion Database Pages10",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "23 9 * * 1"
            }
          ]
        }
      },
      "id": "7c2867a0-4857-4ac1-93dc-4f01288728a0",
      "name": "Daily Schedule Trigger10",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1392, 8176],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [160, 8224],
      "id": "06fe94c0-9e78-4212-b533-bb25d7febecf",
      "name": "Merge10"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [736, 8624],
      "id": "fbaf44cb-acc6-4aef-933c-9f48dab3783a",
      "name": "OpenRouter Chat Model21",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - Utopiads",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1440, 8064],
      "typeVersion": 1,
      "id": "f5e78f64-2659-4b2d-828c-3253c21d606f",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C09BHU139LY",
          "mode": "list",
          "cachedResultName": "client-yma"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion: https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1328, 9040],
      "id": "78f9869d-5b67-4448-9b67-99dd9bc2d638",
      "name": "Send Slack Message11",
      "webhookId": "dbb72e3a-727d-45a3-9bff-f4c0a7032bcf",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "  // Format AI-generated summary into Slack message\n  const aiSummary = $input.all()[0].json.output || $input.all()[0].json;\n\n  // Set target channel based on client\n  const clientChannelMap = {\n    'SimplifAI': 'simplifai-updates',\n    'WSI': 'wsi-updates',\n    'BFD': 'bfd-client-channel'\n  };\n  const targetChannel = clientChannelMap[aiSummary.clientName] || 'general-updates';\n\n  // Format status with emoji\n  const getStatusEmoji = (status) => {\n    const statusLower = (status || '').toLowerCase();\n    if (statusLower.includes('track')) return ':white_check_mark:';\n    if (statusLower.includes('attention') || statusLower.includes('review')) return ':warning:';\n    if (statusLower.includes('blocked') || statusLower.includes('critical')) return ':red_circle:';\n    return ':large_blue_circle:';\n  };\n\n  // Create Slack message\n  const overallStatusEmoji = getStatusEmoji(aiSummary.overallStatus);\n  const currentDate = new Date().toLocaleDateString('en-US', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  let slackMessage = `:chart_with_upwards_trend: *Marketing Board | Daily Project Update for ${aiSummary.clientName}*\\n`;\n  slackMessage += `:calendar: ${currentDate}\\n\\n`;\n\n  // Overall status in blockquote\n  slackMessage += `>${overallStatusEmoji} *Overall Status:* ${aiSummary.overallStatus}\\n`;\n  slackMessage += `>:chart_with_upwards_trend: *Active Projects:* ${aiSummary.projectCount}\\n`;\n  slackMessage += `>:memo: *Last Update:* ${new Date(aiSummary.lastUpdateDate).toLocaleDateString()}\\n\\n`;\n\n  // Project-specific updates\n  if (aiSummary.projectUpdates && aiSummary.projectUpdates.length > 0) {\n    aiSummary.projectUpdates.forEach((project, index) => {\n      const projectStatusEmoji = getStatusEmoji(project.status);\n\n      // Project header in blockquote\n      slackMessage += `>${projectStatusEmoji} *${project.projectName}*\\n`;\n      slackMessage += `>_Status: ${project.status}_\\n\\n`;\n\n      // Latest updates for this project\n      if (project.latestUpdates && project.latestUpdates.length > 0) {\n        slackMessage += `*:memo: Recent Updates:*\\n`;\n        project.latestUpdates.forEach(update => {\n          slackMessage += `• ${update}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Next actions for this project\n      if (project.nextActions && project.nextActions.length > 0) {\n        slackMessage += `*:dart: Next Actions:*\\n`;\n        project.nextActions.forEach(action => {\n          slackMessage += `• ${action}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Blockers for this project\n      if (project.blockers && project.blockers.length > 0) {\n        slackMessage += `*:warning: Blockers:*\\n`;\n        project.blockers.forEach(blocker => {\n          slackMessage += `• ${blocker}\\n`;\n        });\n        slackMessage += `\\n`;\n      }\n\n      // Add spacing between projects (except for last project)\n      if (index < aiSummary.projectUpdates.length - 1) {\n        slackMessage += `\\n─────────────────────────\\n\\n`;\n      }\n    });\n  }\n\n  // Slack context in blockquote\n  if (aiSummary.slackContext && aiSummary.slackContext.trim() !== '') {\n    slackMessage += `\\n*:speech_balloon: Recent Team Discussions:*\\n`;\n    slackMessage += `>${aiSummary.slackContext}\\n\\n`;\n  }\n\n  // Footer\n  slackMessage += `─────────────────────────\\n`;\n  slackMessage += `:robot_face: _Automated update from Notion projects_\\n`;\n  slackMessage += `:clipboard: _For detailed project info, check your Notion workspace_`;\n\n  // Return formatted message\n  return [{\n    json: {\n      channelName: targetChannel,\n      message: slackMessage,\n      clientName: aiSummary.clientName,\n      overallStatus: aiSummary.overallStatus,\n      projectCount: aiSummary.projectCount\n    }\n  }];"
      },
      "id": "82e314a9-1665-4c91-9525-014274cb4dad",
      "name": "Format Slack Message11",
      "type": "n8n-nodes-base.code",
      "position": [1088, 9040],
      "typeVersion": 2
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n    \"type\": \"object\",\n    \"properties\": {\n      \"clientName\": {\n        \"type\": \"string\",\n        \"description\": \"Name of the client\"\n      },\n      \"projectCount\": {\n        \"type\": \"number\",\n        \"description\": \"Number of active projects for this client\"\n      },\n      \"lastUpdateDate\": {\n        \"type\": \"string\",\n        \"description\": \"ISO format date of the last significant update\"\n      },\n      \"overallStatus\": {\n        \"type\": \"string\",\n        \"description\": \"Overall client status (On Track, Needs Attention, Blocked, etc.)\"\n      },\n      \"projectUpdates\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"projectName\": {\n              \"type\": \"string\",\n              \"description\": \"Name of the project\"\n            },\n            \"status\": {\n              \"type\": \"string\",\n              \"description\": \"Current status of this specific project\"\n            },\n            \"latestUpdates\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"2-4 recent updates for this project\"\n            },\n            \"nextActions\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Immediate next steps for this project\"\n            },\n            \"blockers\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"description\": \"Current obstacles for this project (empty array if none)\"\n            }\n          },\n          \"required\": [\"projectName\", \"status\", \"latestUpdates\", \"nextActions\", \"blockers\"]\n        },\n        \"description\": \"Updates grouped by individual projects\"\n      },\n      \"slackContext\": {\n        \"type\": \"string\",\n        \"description\": \"Summary of relevant recent Slack discussions\"\n      }\n    },\n    \"required\": [\"clientName\", \"projectCount\", \"lastUpdateDate\", \"overallStatus\", \"projectUpdates\", \"slackContext\"]\n  }",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [800, 9280],
      "id": "197d0954-5242-487f-bf31-d2cd94712fa3",
      "name": "Structured Output Parser11"
    },
    {
      "parameters": {
        "model": "anthropic/claude-sonnet-4",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [608, 9264],
      "id": "0ea77846-c270-4af2-bab7-7bb4335f80e6",
      "name": "OpenRouter Chat Model22",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are analyzing project data for **{{ $json.currentClient }}** to create a daily update summary.\n\n  **CONTEXT:**\n  - Client: {{ $json.currentClient }}\n  - Number of active projects: {{ $json.projects.length }}\n  - Block-level data available: {{ $json.blocks.length }} blocks\n  - Recent Slack messages (48h): {{ $json.slackContext.messageCount || 0 }}\n\n  **PROJECT DATA:**\n  {{ JSON.stringify($json.projects) }}\n\n  **BLOCK-LEVEL CONTENT:**\n  {{ JSON.stringify($json.blocks) }}\n\n  **RECENT SLACK DISCUSSIONS (Last 48 Hours):**\n  {% if $json.slackContext.recentMessages and $json.slackContext.recentMessages.length > 0 %}\n  Recent team discussions in #{{ $json.slackContext.channelName }}:\n  {{ $json.slackContext.recentMessages.map(msg => `- ${msg.timestamp}: ${msg.text}`).join('\\n') }}\n  {% else %}\n  No recent messages found in the client channel in the last 48 hours.\n  {% endif %}\n\n  **INSTRUCTIONS:**\n  Analyze the block-level content and project data to identify the latest updates for each project. Group all information by individual projects.\n\n  **OUTPUT FORMAT:**\n  Return a JSON object with:\n  - clientName: string ({{ $json.currentClient }})\n  - projectCount: number\n  - lastUpdateDate: string (ISO format of most recent activity found)\n  - overallStatus: string (On Track/Needs Attention/Blocked/Review Required)\n  - projectUpdates: array of objects, each containing:\n    - projectName: string\n    - status: string (project-specific status)\n    - latestUpdates: array of strings (2-4 recent updates for this project)\n    - nextActions: array of strings (immediate next steps for this project)\n    - blockers: array of strings (current obstacles for this project, empty array if none)\n  - slackContext: string (summary of relevant recent team discussions)\n\n  **Focus**: Group everything by project. Each project should have its own updates, actions, and blockers listed separately.\n\n  Today's date: {{ $json.metadata.timestamp }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [608, 9040],
      "id": "bca01de4-0ed6-46ac-8bf5-f4af21c28060",
      "name": "Generate AI Summary11"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = 'SimplifAI';\n  let targetChannel = 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [416, 9088],
      "id": "17184edf-e5bd-4546-b544-0d36bb8dc417",
      "name": "Combine Project + Slack Data11"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "C09BHU139LY",
          "mode": "list",
          "cachedResultName": "client-yma"
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [-144, 8992],
      "id": "ad95e163-8ee3-439d-b63e-51dba3d5b1f8",
      "name": "Get Slack Channel History11",
      "webhookId": "3e67a2be-ed6c-4bba-8408-901d29e0b0aa",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-560, 9232],
      "id": "e6c41950-b72b-4efc-bf9e-1d68b86dd35c",
      "name": "Merge Data11"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the specified client\n  const allItems = $input.all();\n\n  // Try to get client config from previous execution context\n  let currentClient = 'Unknown Client';\n  let targetChannel = 'unknown-channel';\n\n  // Check if we can access the workflow data to get client config\n  try {\n    // Try to find client config from the workflow context\n    const workflowData = $workflow;\n    if (workflowData && workflowData.nodes) {\n      const configNode = workflowData.nodes.find(n => n.name === '📋 Client Configuration');\n      if (configNode && configNode.parameters && configNode.parameters.assignments) {\n        const assignments = configNode.parameters.assignments.assignments;\n        const clientNameAssignment = assignments.find(a => a.name === 'clientName');\n        const channelAssignment = assignments.find(a => a.name === 'slackChannelName');\n\n        if (clientNameAssignment) currentClient = clientNameAssignment.value;\n        if (channelAssignment) targetChannel = channelAssignment.value;\n      }\n    }\n  } catch (error) {\n    console.log('Could not access workflow config, using defaults');\n  }\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-144, 9232],
      "id": "6fdaa16b-76bb-4b42-acbd-e5299ef00adf",
      "name": "Aggregate Client Data11"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-560, 8960],
      "id": "7d37c2f6-d726-47fe-9232-356a4581e83c",
      "name": "Get Child Blocks11",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2426ab60b47980da93d1cf515fc12979?v=2426ab60b47981849d16000c8596e250",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "equals",
              "selectValue": "YMA Bouncy Castles | BFD"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-1072, 9040],
      "id": "5a15034a-e813-4210-a251-0f95f71ae8b7",
      "name": "Get Notion Database Pages11",
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "25 9 * * 1"
            }
          ]
        }
      },
      "id": "4daac853-d0d5-4c9d-87e7-95d8fb98c14d",
      "name": "Daily Schedule Trigger11",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1392, 9040],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [160, 9088],
      "id": "f3fc6d31-87f7-44ca-b1b3-501fe31ad3b1",
      "name": "Merge11"
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [736, 9488],
      "id": "6ea3aed7-528b-41a5-a314-9d8abe634e3b",
      "name": "OpenRouter Chat Model23",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Client - YMA Bouncy Castles",
        "height": 80
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1440, 8928],
      "typeVersion": 1,
      "id": "2a72a7de-03c6-4ddf-9a71-1dbaaea95e7e",
      "name": "Sticky Note11"
    }
  ],
  "pinData": {},
  "connections": {
    "Format Slack Message": {
      "main": [
        [
          {
            "node": "Send Slack Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary": {
      "main": [
        [
          {
            "node": "Format Slack Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data": {
      "main": [
        [
          {
            "node": "Generate AI Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Aggregate Client Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message1": {
      "main": [
        [
          {
            "node": "Send Slack Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary1": {
      "main": [
        [
          {
            "node": "Format Slack Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data1": {
      "main": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data1": {
      "main": [
        [
          {
            "node": "Aggregate Client Data1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks1": {
      "main": [
        [
          {
            "node": "Merge Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages1": {
      "main": [
        [
          {
            "node": "Merge Data1",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message2": {
      "main": [
        [
          {
            "node": "Send Slack Message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary2",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary2": {
      "main": [
        [
          {
            "node": "Format Slack Message2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data2": {
      "main": [
        [
          {
            "node": "Generate AI Summary2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data2": {
      "main": [
        [
          {
            "node": "Aggregate Client Data2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data2": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks2": {
      "main": [
        [
          {
            "node": "Merge Data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages2": {
      "main": [
        [
          {
            "node": "Merge Data2",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger2": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message3": {
      "main": [
        [
          {
            "node": "Send Slack Message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser3": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary3",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary3": {
      "main": [
        [
          {
            "node": "Format Slack Message3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data3": {
      "main": [
        [
          {
            "node": "Generate AI Summary3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History3": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data3": {
      "main": [
        [
          {
            "node": "Aggregate Client Data3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data3": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks3": {
      "main": [
        [
          {
            "node": "Merge Data3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages3": {
      "main": [
        [
          {
            "node": "Merge Data3",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger3": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message4": {
      "main": [
        [
          {
            "node": "Send Slack Message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser4": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary4",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary4": {
      "main": [
        [
          {
            "node": "Format Slack Message4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data4": {
      "main": [
        [
          {
            "node": "Generate AI Summary4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History4": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data4": {
      "main": [
        [
          {
            "node": "Aggregate Client Data4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data4": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks4": {
      "main": [
        [
          {
            "node": "Merge Data4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages4": {
      "main": [
        [
          {
            "node": "Merge Data4",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger4": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message5": {
      "main": [
        [
          {
            "node": "Send Slack Message5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser5": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary5",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary5": {
      "main": [
        [
          {
            "node": "Format Slack Message5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data5": {
      "main": [
        [
          {
            "node": "Generate AI Summary5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History5": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data5": {
      "main": [
        [
          {
            "node": "Aggregate Client Data5",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data5": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks5": {
      "main": [
        [
          {
            "node": "Merge Data5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages5": {
      "main": [
        [
          {
            "node": "Merge Data5",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger5": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message6": {
      "main": [
        [
          {
            "node": "Send Slack Message6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser6": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary6",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary6": {
      "main": [
        [
          {
            "node": "Format Slack Message6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data6": {
      "main": [
        [
          {
            "node": "Generate AI Summary6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History6": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data6": {
      "main": [
        [
          {
            "node": "Aggregate Client Data6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data6": {
      "main": [
        [
          {
            "node": "Merge6",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks6": {
      "main": [
        [
          {
            "node": "Merge Data6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages6": {
      "main": [
        [
          {
            "node": "Merge Data6",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger6": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge6": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser6",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message7": {
      "main": [
        [
          {
            "node": "Send Slack Message7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser7": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary7",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary7": {
      "main": [
        [
          {
            "node": "Format Slack Message7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data7": {
      "main": [
        [
          {
            "node": "Generate AI Summary7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History7": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data7": {
      "main": [
        [
          {
            "node": "Aggregate Client Data7",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data7": {
      "main": [
        [
          {
            "node": "Merge7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks7": {
      "main": [
        [
          {
            "node": "Merge Data7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages7": {
      "main": [
        [
          {
            "node": "Merge Data7",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger7": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge7": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message8": {
      "main": [
        [
          {
            "node": "Send Slack Message8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser8": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary8",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary8",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary8": {
      "main": [
        [
          {
            "node": "Format Slack Message8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data8": {
      "main": [
        [
          {
            "node": "Generate AI Summary8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History8": {
      "main": [
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data8": {
      "main": [
        [
          {
            "node": "Aggregate Client Data8",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data8": {
      "main": [
        [
          {
            "node": "Merge8",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks8": {
      "main": [
        [
          {
            "node": "Merge Data8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages8": {
      "main": [
        [
          {
            "node": "Merge Data8",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger8": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge8": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser8",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message9": {
      "main": [
        [
          {
            "node": "Send Slack Message9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser9": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary9",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary9",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary9": {
      "main": [
        [
          {
            "node": "Format Slack Message9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data9": {
      "main": [
        [
          {
            "node": "Generate AI Summary9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History9": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data9": {
      "main": [
        [
          {
            "node": "Aggregate Client Data9",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data9": {
      "main": [
        [
          {
            "node": "Merge9",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks9": {
      "main": [
        [
          {
            "node": "Merge Data9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages9": {
      "main": [
        [
          {
            "node": "Merge Data9",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger9": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge9": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model19": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser9",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message10": {
      "main": [
        [
          {
            "node": "Send Slack Message10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser10": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary10",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model20": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary10",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary10": {
      "main": [
        [
          {
            "node": "Format Slack Message10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data10": {
      "main": [
        [
          {
            "node": "Generate AI Summary10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History10": {
      "main": [
        [
          {
            "node": "Merge10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data10": {
      "main": [
        [
          {
            "node": "Aggregate Client Data10",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data10": {
      "main": [
        [
          {
            "node": "Merge10",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks10": {
      "main": [
        [
          {
            "node": "Merge Data10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages10": {
      "main": [
        [
          {
            "node": "Merge Data10",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger10": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge10": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model21": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser10",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message11": {
      "main": [
        [
          {
            "node": "Send Slack Message11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser11": {
      "ai_outputParser": [
        [
          {
            "node": "Generate AI Summary11",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model22": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary11",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary11": {
      "main": [
        [
          {
            "node": "Format Slack Message11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data11": {
      "main": [
        [
          {
            "node": "Generate AI Summary11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History11": {
      "main": [
        [
          {
            "node": "Merge11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data11": {
      "main": [
        [
          {
            "node": "Aggregate Client Data11",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data11": {
      "main": [
        [
          {
            "node": "Merge11",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks11": {
      "main": [
        [
          {
            "node": "Merge Data11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages11": {
      "main": [
        [
          {
            "node": "Merge Data11",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger11": {
      "main": [
        [
          {
            "node": "Get Notion Database Pages11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge11": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model23": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser11",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "823fa14f-9ea0-448d-ae43-f1fe2739fb89",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "09dac3b1fd535c8a2e81b8c333863b71134f03a2d7b0c5fb38cc1b81fda4ce0b"
  },
  "id": "sGcwWk5VwzDZGQiZ",
  "tags": [
    {
      "createdAt": "2025-08-17T20:00:58.638Z",
      "updatedAt": "2025-08-17T20:00:58.638Z",
      "id": "AcBnyW08HnPACs3E",
      "name": "Notion"
    },
    {
      "createdAt": "2025-08-17T23:12:38.701Z",
      "updatedAt": "2025-08-17T23:12:38.701Z",
      "id": "HTCzEWybixzofcrj",
      "name": "Slack Updates"
    },
    {
      "createdAt": "2025-08-17T20:01:00.158Z",
      "updatedAt": "2025-08-17T20:01:00.158Z",
      "id": "z1qNg60fa8ZXazIY",
      "name": "Slack"
    }
  ]
}
