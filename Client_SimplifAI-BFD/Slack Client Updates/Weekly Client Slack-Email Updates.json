{
  "name": "Weekly Client Updates | Bi-Weekly Emails | BFD/SimplifAI",
  "nodes": [
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1u26SA1lI3bvHJBY7JfHjZ59OhGlDDRtgpfHYbsx840Q",
          "mode": "list",
          "cachedResultName": "BFD Finances",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1u26SA1lI3bvHJBY7JfHjZ59OhGlDDRtgpfHYbsx840Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 273638994,
          "mode": "list",
          "cachedResultName": "Client Details",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1u26SA1lI3bvHJBY7JfHjZ59OhGlDDRtgpfHYbsx840Q/edit#gid=273638994"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Current Client?",
              "lookupValue": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [-1440, 80],
      "id": "ca72c373-d836-4e5b-bf14-1b3b895d45e5",
      "name": "Get All Client Rows",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XTfYeEotsbhc5dxV",
          "name": "Google Sheets account - Redwan"
        }
      }
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-1232, 80],
      "id": "7fa6fbb3-8eaf-496d-8b5c-4089d0f4fae7",
      "name": "Split Client Rows",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Split Client Rows').first().json[\"Slack URL\"] }}",
          "mode": "url"
        },
        "text": "={{ $json.message }}\n---\nLink to Notion Cards: {{ $('Split Client Rows').first().json[\"Notion Project Link\"] }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1696, 80],
      "id": "618228c1-ed76-432b-ad04-37197b053ee0",
      "name": "Send Slack Message1",
      "webhookId": "642881da-e9fa-4c2c-9f59-f622f5f18e84",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// === Format Slack Message (full code node) ===\n// Builds a Slack-friendly client update from the model output,\n// with robust JSON extraction and a PLAIN TEXT email preview.\n\n// --- Helpers ---\n\n// Extract JSON even if wrapped in code fences or envelopes.\nfunction extractJsonPayload(inputJson) {\n  let candidate = inputJson;\n\n  // { output: {...} }\n  if (candidate && typeof candidate === 'object' && candidate.output) candidate = candidate.output;\n\n  // [ { text: \"...\" } ] or [ { action, text } ]\n  if (Array.isArray(candidate) && candidate.length === 1 && candidate[0]?.text) candidate = candidate[0].text;\n\n  // { text: \"...\" } (with OR without action)\n  if (candidate && typeof candidate === 'object' && typeof candidate.text === 'string') candidate = candidate.text;\n\n  // Already an object?\n  if (candidate && typeof candidate === 'object') return candidate;\n\n  // String → try fences then slice\n  if (typeof candidate === 'string') {\n    const fenced = candidate.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/i);\n    if (fenced?.[1]) { try { return JSON.parse(fenced[1].trim()); } catch {} }\n    const first = candidate.indexOf('{'), last = candidate.lastIndexOf('}');\n    if (first !== -1 && last > first) { try { return JSON.parse(candidate.slice(first, last + 1)); } catch {} }\n  }\n  return null;\n}\n\n\n// Map status -> emoji (tolerant of free text).\nfunction getStatusEmoji(status) {\n  const s = (status || '').toLowerCase();\n  if (/blocked|critical|fail/.test(s)) return ':red_circle:';\n  if (/risk|at\\s*risk|needs\\s*attention|review|awaiting/.test(s)) return ':warning:';\n  if (/complete|done|finished/.test(s)) return ':checkered_flag:';\n  if (/on\\s*track|green|ok|good/.test(s)) return ':white_check_mark:';\n  if (/hold|paused|deferred/.test(s)) return ':pause_button:';\n  return ':large_blue_circle:';\n}\n\n// Derive portfolio status if not provided at top level.\nfunction deriveOverallStatus(projects = []) {\n  const stats = projects.map(p => (p.status || '').toLowerCase());\n  if (stats.some(s => /blocked|critical|fail/.test(s))) return 'Blocked';\n  if (stats.some(s => /risk|needs\\s*attention|review|awaiting/.test(s))) return 'Needs Attention';\n  if (stats.some(s => /hold|paused|deferred/.test(s))) return 'On Hold';\n  if (stats.length && stats.every(s => /complete|done|finished|on\\s*track|green|ok|good/.test(s))) return 'Complete';\n  return 'On Track';\n}\n\n// Convert markdown-ish text to PLAIN TEXT for email preview.\nfunction toPlainText(s) {\n  if (!s) return '';\n  let t = String(s);\n\n  // Normalize line breaks\n  t = t.replace(/\\r\\n/g, '\\n');\n\n  // [label](url) -> label (url)\n  t = t.replace(/\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\s)]+)\\)/g, '$1 ($2)');\n\n  // Remove inline code/backticks\n  t = t.replace(/`{1,3}([^`]+)`{1,3}/g, '$1');\n\n  // Strip bold/italic/strike markers (*, _, ~)\n  t = t.replace(/[*_~]{1,3}/g, '');\n\n  // Remove markdown headings (##, ###, etc.)\n  t = t.replace(/^\\s{0,3}#{1,6}\\s+/gm, '');\n\n  // Remove quote markers\n  t = t.replace(/^\\s*>+\\s?/gm, '');\n\n  // Normalize bullets: \"- \" or \"* \" -> \"• \"\n  t = t.replace(/^\\s*[-*]\\s+/gm, '• ');\n\n  // Collapse extra blank lines\n  t = t.replace(/\\n{3,}/g, '\\n\\n');\n\n  // Strip trivial HTML tags if any slipped in\n  t = t.replace(/<\\/?(strong|em|b|i|u|p|br|h[1-6])[^>]*>/gi, '');\n\n  return t.trim();\n}\n\n// --- Main ---\n\nconst root = $input.all()[0]?.json || {};\nlet ai = extractJsonPayload(root);\n\n// Fail gracefully if no JSON\nif (!ai) {\n  return [{\n    json: {\n      channelName: 'general-updates',\n      message: ':warning: Unable to format update: AI output was not valid JSON.',\n      clientName: 'Unknown',\n      projectCount: 0,\n      overallStatus: 'Needs Attention'\n    }\n  }];\n}\n\n// Optional channel mapping convenience (Send Slack node still uses channelId from Sheets)\nconst clientChannelMap = {\n  'SimplifAI': 'simplifai-updates',\n  'WSI': 'wsi-updates',\n  'BFD': 'bfd-client-channel'\n};\nconst targetChannel = clientChannelMap[ai.clientName] || 'general-updates';\n\n// Normalize projects array\nconst projects = Array.isArray(ai.projectUpdates) ? ai.projectUpdates : [];\n\n// Pick overall status (prefer explicit, else derive)\nconst overallStatus = ai.overallStatus || deriveOverallStatus(projects);\nconst overallEmoji = getStatusEmoji(overallStatus);\n\nconst currentDate = new Date().toLocaleDateString('en-US', {\n  weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'\n});\n\nconst projectCount = Number.isInteger(ai.projectCount)\n  ? ai.projectCount\n  : projects.length;\n\nconst lastUpdateDate = ai.lastUpdateDate || ''; // include only if present\n\n// --- Build Slack message ---\n\nlet msg = '';\nmsg += `:chart_with_upwards_trend: *Weekly Client Update | ${ai.clientName || 'Client'}*\\n`;\nmsg += `:calendar: ${currentDate}\\n\\n`;\n\nmsg += `>${overallEmoji} *Overall Status:* ${overallStatus}\\n`;\nif (ai.summary) msg += `>_:memo: Summary:_ ${ai.summary}\\n`;\nmsg += `>:bar_chart: *Active Projects:* ${projectCount}\\n`;\nif (lastUpdateDate) msg += `>:hourglass_flowing_sand: *Last Update:* ${lastUpdateDate}\\n`;\nmsg += `\\n`;\n\n// Per-project sections\nif (projects.length > 0) {\n  projects.forEach((p, i) => {\n    const pEmoji = getStatusEmoji(p.status);\n    msg += `>${pEmoji} *${p.projectName || 'Untitled Project'}*\\n`;\n    if (p.status) msg += `>_Status:_ ${p.status}\\n`;\n    if (p.owner) msg += `>_Owner:_ ${p.owner}\\n`;\n    if (p.dueDate) msg += `>_Due:_ ${p.dueDate}\\n`;\n    if (p.impact) msg += `>_Impact:_ ${p.impact}\\n`;\n    msg += `\\n`;\n\n    if (Array.isArray(p.latestUpdates) && p.latestUpdates.length) {\n      msg += `*:memo: Recent Updates:*\\n`;\n      p.latestUpdates.forEach(u => { msg += `• ${u}\\n`; });\n      msg += `\\n`;\n    }\n\n    if (Array.isArray(p.nextActions) && p.nextActions.length) {\n      msg += `*:dart: Next Actions:*\\n`;\n      p.nextActions.forEach(a => { msg += `• ${a}\\n`; });\n      msg += `\\n`;\n    }\n\n    if (Array.isArray(p.blockers) && p.blockers.length) {\n      msg += `*:warning: Blockers:*\\n`;\n      p.blockers.forEach(b => { msg += `• ${b}\\n`; });\n      msg += `\\n`;\n    }\n\n    if (Array.isArray(p.links) && p.links.length) {\n      msg += `*:link: Links:*\\n`;\n      p.links.forEach(l => {\n        if (l && l.url) {\n          const label = l.label ? ` (${l.label})` : '';\n          msg += `• ${l.url}${label}\\n`;\n        }\n      });\n      msg += `\\n`;\n    }\n\n    if (i < projects.length - 1) msg += `─────────────────────────\\n\\n`;\n  });\n}\n\n// Optional cross-project fields if the model provided them\nif (Array.isArray(ai.blockers) && ai.blockers.length) {\n  msg += `*:no_entry: Cross-Project Blockers:*\\n`;\n  ai.blockers.forEach(b => { msg += `• ${b}\\n`; });\n  msg += `\\n`;\n}\n\nif (Array.isArray(ai.nextTwoWeeksFocus) && ai.nextTwoWeeksFocus.length) {\n  msg += `*:compass: Next Two Weeks Focus:*\\n`;\n  ai.nextTwoWeeksFocus.forEach(n => { msg += `• ${n}\\n`; });\n  msg += `\\n`;\n}\n\n// Slack context (optional)\nif (ai.slackContext && String(ai.slackContext).trim() !== '') {\n  msg += `*:speech_balloon: Recent Team Discussions (48h):*\\n`;\n  msg += `>${ai.slackContext}\\n\\n`;\n}\n\n// --- Email preview (optional, PLAIN TEXT only) ---\nif (ai.emailSubject || ai.emailBody) {\n  msg += 'Email draft (plain text)\\n';\n  if (ai.emailSubject) {\n    msg += `Subject: ${toPlainText(ai.emailSubject)}\\n`;\n  }\n  if (ai.emailBody) {\n    const bodyPlain = toPlainText(ai.emailBody);\n    const preview = bodyPlain.length > 600 ? bodyPlain.slice(0, 600) + '…' : bodyPlain;\n    msg += `Body:\\n${preview}\\n\\n`;\n  }\n}\n\n// Footer\nmsg += `─────────────────────────\\n`;\nmsg += `:robot_face: _Automated update from Notion projects_\\n`;\nmsg += `:clipboard: _For details, see the linked Notion cards_`;\n\n// Return payload for Send Slack node\nreturn [{\n  json: {\n    channelName: targetChannel,\n    message: msg,\n    clientName: ai.clientName || 'Client',\n    overallStatus,\n    projectCount\n  }\n}];\n"
      },
      "id": "fe56d9c8-83ff-4729-bd97-1652c9588577",
      "name": "Format Slack Message1",
      "type": "n8n-nodes-base.code",
      "position": [1408, 80],
      "typeVersion": 2
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [768, 304],
      "id": "18b01621-54bb-48f1-99d7-8dc8aff85819",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a project manager producing a **bi-weekly client update** for **{{ $('Split Client Rows').first().json[\"Notion Name\"] }}**.\n\n⚠️ OUTPUT CONTRACT\n- Return **RAW JSON ONLY** that validates the schema below.\n- **No** code fences, backticks, arrays at top level, tool envelopes, or prose.\n- The **first character must be `{`** and the **last character must be `}`**.\n- Omit unknown fields; do not invent data.\n\nCONTEXT\n- Client: {{ $('Split Client Rows').first().json[\"Notion Name\"] }}\n- Projects: {{ $json.projects.length }}\n- Blocks: {{ $json.blocks.length }}\n- Slack (48h): {{ $json.slackContext.messageCount || 0 }}\n- Timestamp: {{ $json.metadata.timestamp }}\n\nDATA: PROJECTS\n{{ JSON.stringify($json.projects) }}\n\nDATA: BLOCKS\n{{ JSON.stringify($json.blocks) }}\n\nDATA: RECENT SLACK (48h)\n{% if $json.slackContext.recentMessages && $json.slackContext.recentMessages.length > 0 -%}\nChannel #{{ $json.slackContext.channelName }}\n{{ $json.slackContext.recentMessages.map(m => `- ${m.timestamp} | ${m.text}`).join('\\n') }}\n{% else -%}\nNo recent messages in the last 48 hours.\n{% endif -%}\n\nGUIDANCE\n- For each project, write brief, client-friendly bullets.\n- Keep technical details translated to business impact.\n- Include links if present (e.g., Notion, Docs, Staging).\n- Do not add top-level summaries, statuses, email text, or extra properties.\n\nSCHEMA (STRICT)\nReturn JSON exactly matching:\n\n{\n  \"version\": \"1.0\",\n  \"generatedAt\": \"<ISO-8601 datetime>\",\n  \"clientName\": \"<string>\",\n  \"projectUpdates\": [\n    {\n      \"projectName\": \"<string>\",\n      \"status\": \"<string>\",\n      \"latestUpdates\": [\"<string>\", \"...\"],\n      \"nextActions\": [\"<string>\", \"...\"],\n      \"blockers\": [\"<string>\", \"...\"],\n      \"links\": [{\"label\":\"<string>\",\"url\":\"<string>\"}]\n    }\n  ]\n}\n\nREMINDER\n- RAW JSON only. First char `{`, last `}`.\n",
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [768, 80],
      "id": "95a8ae2e-b33c-46d1-ab8b-74a7bce1fa7a",
      "name": "Generate AI Summary1"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = $('Split Client Rows').item.json[\"Notion Name\"] || 'SimplifAI';\n  let targetChannel = $('Split Client Rows').item.json[\"Slack Channel Name\"] || 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [576, 128],
      "id": "b199cd3b-4a61-4564-ae56-599c1acd7cb7",
      "name": "Combine Project + Slack Data1"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Split Client Rows').item.json[\"Slack URL\"] }}",
          "mode": "url"
        },
        "limit": 1,
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [16, 32],
      "id": "98b715a9-52ab-4b88-9865-6132e1f5d30d",
      "name": "Get Slack Channel History1",
      "webhookId": "34d70c44-0574-4c50-88a1-d1ed782e80a8",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-400, 272],
      "id": "4d1a1fcb-f401-46a6-8642-f34a5ad980cc",
      "name": "Merge Data1"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the current client row\n  const allItems = $input.all();\n  \n  // Get current client info from the Split Client Rows node\n  const currentClientRow = $('Split Client Rows').item.json;\n  const currentClient = currentClientRow[\"Notion Name\"] || 'Unknown Client';\n  const targetChannel = currentClientRow[\"Slack Channel Name\"] || 'unknown-channel';\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      // Only include projects for the current client\n      if (client !== currentClient) {\n        continue;\n      }\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [16, 272],
      "id": "a234a8c4-d66d-4352-abb3-b6d07c5c663d",
      "name": "Aggregate Client Data1"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-400, 0],
      "id": "ad8664a4-6492-41f9-aaf0-96afe2a7f564",
      "name": "Get Child Blocks1",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2626ab60b479805daf3be7f77576900a?v=2626ab60b4798122bdfc000c5a3ae2d6",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "=equals",
              "selectValue": "={{ $('Split Client Rows').item.json[\"Notion Name\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-912, 80],
      "id": "11015108-4bb8-4166-b313-8ffb2a04e6df",
      "name": "Get Notion Database Pages1",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [1],
              "triggerAtHour": 8
            }
          ]
        }
      },
      "id": "a2671174-f5aa-476a-a216-d12f16b5c883",
      "name": "Daily Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1648, 80],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [320, 128],
      "id": "6a209446-057d-473b-abaa-115e28efa9ce",
      "name": "Merge1"
    },
    {
      "parameters": {
        "content": "# Slack Updates",
        "height": 80,
        "width": 272
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1696, -32],
      "typeVersion": 1,
      "id": "50becb34-c59c-48e6-aa30-abf378ab9f6b",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "jsCode": "// Sanitize LLM output for downstream nodes.\n// Unwraps: [{ action:\"parse\", text:\"```json ...```\"}], { action, text }, { text }, or raw string.\n// Strips code fences and returns a parsed JSON object under `json`.\n\nfunction extractEnvelope(payload) {\n  // Structured Output Parser style\n  if (payload && typeof payload === 'object' && payload.output && typeof payload.output === 'object') {\n    return { kind: 'object', value: payload.output };\n  }\n  // Array envelope: [ { action?, text } ]\n  if (Array.isArray(payload) && payload.length === 1 && payload[0] && typeof payload[0] === 'object') {\n    if (typeof payload[0].text === 'string') return { kind: 'text', value: payload[0].text };\n  }\n  // Object with text (with or without action)\n  if (payload && typeof payload === 'object' && typeof payload.text === 'string') {\n    return { kind: 'text', value: payload.text };\n  }\n  // Already an object that looks like the JSON we want\n  if (payload && typeof payload === 'object') return { kind: 'object', value: payload };\n  // Raw string\n  if (typeof payload === 'string') return { kind: 'text', value: payload };\n  return { kind: 'unknown', value: payload };\n}\n\nfunction stripCodeFences(s) {\n  if (typeof s !== 'string') return s;\n  const fenced = s.match(/```(?:json)?\\\\s*([\\\\s\\\\S]*?)\\\\s*```/i);\n  if (fenced && fenced[1]) return fenced[1].trim();\n  return s.trim();\n}\n\nfunction parseJsonFromText(s) {\n  try { return JSON.parse(s); } catch {}\n  const first = s.indexOf('{');\n  const last = s.lastIndexOf('}');\n  if (first !== -1 && last > first) {\n    try { return JSON.parse(s.slice(first, last + 1)); } catch {}\n  }\n  return null;\n}\n\n// ---- main ----\nconst items = $input.all();\nconst out = [];\n\nfor (const item of items) {\n  const payload = item.json;\n  const { kind, value } = extractEnvelope(payload);\n\n  if (kind === 'object') {\n    out.push({ json: value });\n    continue;\n  }\n\n  if (kind === 'text') {\n    const raw = stripCodeFences(value);\n    const obj = parseJsonFromText(raw);\n    if (obj && typeof obj === 'object') {\n      out.push({ json: obj });\n      continue;\n    }\n  }\n\n  out.push({\n    json: {\n      __error: true,\n      message: \"Failed to parse LLM output into JSON.\",\n      samplePreview: typeof value === 'string' ? value.slice(0, 500) : value\n    }\n  });\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1152, 80],
      "id": "2a40f88d-b30c-4529-bee2-62d278a64e77",
      "name": "Sanitize LLM JSON1"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1904, 80],
      "id": "f41c4fef-bcc5-4db3-8549-4fd46bd9c7b0",
      "name": "Wait1",
      "webhookId": "6bf2e13c-33bb-4bea-9cc6-13f40d7db89e"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1u26SA1lI3bvHJBY7JfHjZ59OhGlDDRtgpfHYbsx840Q",
          "mode": "list",
          "cachedResultName": "BFD Finances",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1u26SA1lI3bvHJBY7JfHjZ59OhGlDDRtgpfHYbsx840Q/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 273638994,
          "mode": "list",
          "cachedResultName": "Client Details",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1u26SA1lI3bvHJBY7JfHjZ59OhGlDDRtgpfHYbsx840Q/edit#gid=273638994"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Current Client?",
              "lookupValue": "true"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [-1344, 848],
      "id": "a5510f73-437a-4566-a83f-c8c424bc9f3a",
      "name": "Get All Client Rows1",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "XTfYeEotsbhc5dxV",
          "name": "Google Sheets account - Redwan"
        }
      }
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-1136, 848],
      "id": "bcb52f9b-2642-47af-a3ca-0d3f1a6ecc73",
      "name": "Split Client Rows1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "maxTokens": 16000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [864, 1072],
      "id": "8533c694-b631-4903-b1ff-5391b0cabcd5",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "6it7RJzJeBc7WSQ7",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a project manager writing a **2-week status update email** to the client **{{ $('Split Client Rows1').first().json[\"Contact Person\"] }}**.\nSummarize the updates from the provided Notion card(s) and, if present, the recent Slack context.\n\n⚠️ OUTPUT CONTRACT\n- Return **RAW JSON ONLY** that validates the schema below.\n- **No** code fences, backticks, arrays at top level, tool envelopes, or prose.\n- The **first character must be `{`** and the **last character must be `}`**.\n- Omit unknown fields; do not invent data.\n\nDO NOT DO THIS\n- Do **not** write “the client wants…”, “the client requested…”, or third-person references to the client; write neutrally and directly.\n- Do **not** greet the client inside the sections (the email shell will add the greeting).\n- Do **not** produce paragraphs for section content; **use short bullet items** (arrays of strings).\n\nCONTEXT\n- Client: {{ $('Split Client Rows1').first().json[\"Contact Person\"] }}\n- Projects: {{ $json.projects.length }}\n- Blocks: {{ $json.blocks.length }}\n- Slack (48h): {{ $json.slackContext.messageCount || 0 }}\n- Timestamp: {{ $json.metadata.timestamp }}\n\nDATA: PROJECTS\n{{ JSON.stringify($json.projects) }}\n\nDATA: BLOCKS\n{{ JSON.stringify($json.blocks) }}\n\nDATA: RECENT SLACK (48h)\n{% if $json.slackContext.recentMessages && $json.slackContext.recentMessages.length > 0 -%}\nChannel #{{ $json.slackContext.channelName }}\n{{ $json.slackContext.recentMessages.map(m => `- ${m.timestamp} | ${m.text}`).join('\\n') }}\n{% else -%}\nNo recent messages in the last 48 hours.\n{% endif -%}\n\nSTYLE & TONE\n- Clear, professional, confident; warm but business-appropriate.\n- Translate technical notes into client value.\n- Remove irrelevant internal/admin details.\n- Each section should be **2–6 concise bullets** (each bullet = a single, clear outcome or task).\n\nSTRUCTURE (group BY project)\nFor each project, provide **arrays of bullets** for:\n- progressCompleted (what was delivered / value)\n- ongoingWork (what’s actively in progress)\n- blockers (only those impacting delivery/timeline; include mitigation where possible)\n- nextSteps (what’s next)\n- links (label+url)\n\nSCHEMA (STRICT)\nReturn JSON exactly matching:\n{\n  \"version\": \"1.0\",\n  \"generatedAt\": \"<ISO-8601 datetime>\",\n  \"clientName\": \"<string>\",\n  \"emailSubject\": \"<string>\",\n  \"projects\": [\n    {\n      \"projectName\": \"<string>\",\n      \"progressCompleted\": [\"<string>\", \"...\"],\n      \"ongoingWork\": [\"<string>\", \"...\"],\n      \"blockers\": [\"<string>\", \"...\"],\n      \"nextSteps\": [\"<string>\", \"...\"],\n      \"links\": [{\"label\":\"<string>\",\"url\":\"<string>\"}]\n    }\n  ],\n  \"window\": {\"start\":\"<YYYY-MM-DD>\", \"end\":\"<YYYY-MM-DD>\"},\n  \"emailBodyHtml\": \"<HTML string>\",      // optional; simple tags only: <p>, <ul>, <li>, <strong>, <em>, <a>\n  \"emailBodyText\": \"<plain text string>\" // optional; clean plaintext equivalent\n}\n\nNOTES\n- If you include emailBodyHtml/Text, they must reflect the **grouped-by-project bullet** structure.\n- Otherwise omit both; downstream will format from the structured fields.\n- Derive window.start and window.end as the most recent two-week range ending on {{ $json.metadata.timestamp.split('T')[0] }}.\n",
        "batching": {
          "batchSize": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [864, 848],
      "id": "58e34b24-713e-4845-a717-238e9c482c5b",
      "name": "Generate AI Summary"
    },
    {
      "parameters": {
        "jsCode": "  // Combine project data with Slack history for AI processing\n  const allInputs = $input.all();\n  console.log('Total inputs received:', allInputs.length);\n\n  // Initialize data containers\n  let projects = [];\n  let notionBlocks = [];\n  let slackHistory = [];\n  let currentClient = $('Split Client Rows1').item.json[\"Notion Name\"] || 'SimplifAI';\n  let targetChannel = $('Split Client Rows1').item.json[\"Slack Channel Name\"] || 'simplifai-updates';\n\n  // Process all merged inputs to separate different data types\n  for (let i = 0; i < allInputs.length; i++) {\n    const input = allInputs[i].json;\n\n    // Check if this is aggregated project data\n    if (input.currentClient !== undefined && input.projects !== undefined) {\n      // This is from Aggregate Client Data\n      currentClient = input.currentClient;\n      targetChannel = input.targetChannel;\n      projects = input.projects || [];\n      notionBlocks = [...notionBlocks, ...(input.blocks || [])];\n      console.log('Found aggregated project data:', currentClient, 'projects:', projects.length);\n    }\n    // Check if this is a Slack message\n    else if (input.ts && (input.type === 'message' || input.subtype)) {\n      slackHistory.push(input);\n    }\n    // Check if this is a Notion block\n    else if (input.object === 'block') {\n      notionBlocks.push(input);\n    }\n    // Check if this item has project-like properties (fallback)\n    else if (input.pageId || input.projectName || input.client) {\n      projects.push(input);\n      // Extract client info if not set\n      if (currentClient === 'SimplifAI' && input.client) {\n        currentClient = input.client;\n      }\n    }\n  }\n\n  console.log('Data separation results:', {\n    projects: projects.length,\n    notionBlocks: notionBlocks.length,\n    slackMessages: slackHistory.length,\n    currentClient: currentClient\n  });\n\n  // Extract client from projects if still unknown\n  if (currentClient === 'Unknown Client' && projects.length > 0) {\n    currentClient = projects[0].client || 'SimplifAI';\n    console.log('Extracted client from projects:', currentClient);\n  }\n\n  // Set target channel based on client\n  if (targetChannel === 'unknown-channel') {\n    const clientChannelMap = {\n      'SimplifAI': 'simplifai-updates',\n      'WSI': 'wsi-updates',\n      'BFD': 'bfd-client-channel'\n    };\n    targetChannel = clientChannelMap[currentClient] || `${currentClient.toLowerCase().replace(/\\\\s+/g, '-')}-updates`;\n  }\n\n  // Filter blocks that belong to this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = notionBlocks.filter(block => {\n    if (!block.parent?.page_id) return false;\n    const blockPageId = block.parent.page_id.replace(/-/g, '');\n    return clientProjectIds.some(projectId => projectId === blockPageId);\n  });\n\n  console.log('Block filtering:', {\n    totalBlocks: notionBlocks.length,\n    clientProjectIds: clientProjectIds.length,\n    filteredBlocks: clientBlocks.length\n  });\n\n  // Filter Slack messages from last 48 hours\n  const now = new Date();\n  const fortyEightHoursAgo = new Date(now.getTime() - (48 * 60 * 60 * 1000));\n\n  const recentMessages = slackHistory\n    .filter(msg => {\n      if (!msg || !msg.ts) return false;\n      const msgDate = new Date(msg.ts * 1000);\n      const isRecent = msgDate >= fortyEightHoursAgo;\n      const hasContent = msg.text || msg.subtype;\n      const notBot = !msg.bot_id;\n      return isRecent && hasContent && notBot;\n    })\n    .slice(0, 20)\n    .map(msg => ({\n      text: msg.text || `${msg.subtype}: ${msg.user}`,\n      user: msg.user,\n      timestamp: new Date(msg.ts * 1000).toISOString(),\n      thread_ts: msg.thread_ts,\n      subtype: msg.subtype\n    }));\n\n  console.log('Slack message filtering:', {\n    totalSlackMessages: slackHistory.length,\n    filteredRecentMessages: recentMessages.length,\n    fortyEightHoursAgo: fortyEightHoursAgo.toISOString()\n  });\n\n  // Build final result\n  const result = {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projects: projects,\n    blocks: clientBlocks,\n    slackContext: {\n      channelName: targetChannel,\n      recentMessages: recentMessages,\n      messageCount: recentMessages.length,\n      timeWindow: '48 hours',\n      totalSlackItems: slackHistory.length,\n      filteredCount: recentMessages.length\n    },\n    metadata: {\n      timestamp: new Date().toISOString(),\n      processedClient: currentClient,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      hasSlackContext: recentMessages.length > 0,\n      inputsProcessed: allInputs.length,\n      totalNotionBlocks: notionBlocks.length\n    }\n  };\n\n  console.log('Final result summary:', {\n    client: result.currentClient,\n    projects: result.projects.length,\n    blocks: result.blocks.length,\n    slackMessages: result.slackContext.messageCount,\n    totalProcessed: allInputs.length\n  });\n\n  return [{ json: result }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [672, 896],
      "id": "8ecfb540-3be9-46d6-b56b-72a6e678335a",
      "name": "Combine Project + Slack Data"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "history",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Split Client Rows1').item.json[\"Slack URL\"] }}",
          "mode": "url"
        },
        "limit": 1,
        "filters": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [112, 800],
      "id": "76d1a75e-1f81-4660-b22c-e71b5abb88ec",
      "name": "Get Slack Channel History",
      "webhookId": "34d70c44-0574-4c50-88a1-d1ed782e80a8",
      "credentials": {
        "slackApi": {
          "id": "BwslAy6Dqpeg77Gq",
          "name": "Slack account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-304, 1040],
      "id": "899b2a84-9d1a-4e36-a80d-062e4e710c78",
      "name": "Merge Data"
    },
    {
      "parameters": {
        "jsCode": "// Extract and organize project data for the current client row\n  const allItems = $input.all();\n  \n  // Get current client info from the Split Client Rows node\n  const currentClientRow = $('Split Client Rows1').item.json;\n  const currentClient = currentClientRow[\"Notion Name\"] || 'Unknown Client';\n  const targetChannel = currentClientRow[\"Slack Channel Name\"] || 'unknown-channel';\n\n  // Separate blocks and project data\n  const blocks = [];\n  const projects = [];\n\n  // Process all items and identify their types\n  for (const item of allItems) {\n    if (item.json.type || item.json.object === 'block') {\n      // This is a Notion block\n      blocks.push(item.json);\n    } else if (item.json.properties || item.json.id) {\n      // This is a Notion page/project\n      const pageIdWithDashes = item.json.id || 'unknown';\n      const pageId = pageIdWithDashes.replace(/-/g, ''); // Remove all dashes\n\n      // Extract project details\n      const client = item.json.property_client ||\n        item.json.properties?.Client?.select?.name ||\n        item.json.properties?.Client?.rich_text?.[0]?.text?.content ||\n        item.json.properties?.Client?.title?.[0]?.text?.content ||\n        'Unknown Client';\n\n      // Only include projects for the current client\n      if (client !== currentClient) {\n        continue;\n      }\n\n      const projectName = item.json.name ||\n        item.json.property_project_name ||\n        item.json.properties?.Name?.title?.[0]?.text?.content ||\n        item.json.properties?.Title?.title?.[0]?.text?.content ||\n        item.json.properties?.Activity?.title?.[0]?.text?.content ||\n        item.json.properties?.Project?.title?.[0]?.text?.content ||\n        'Untitled Project';\n\n      // Extract additional details\n      const status = item.json.property_status ||\n        item.json.properties?.Status?.status?.name ||\n        item.json.properties?.Status?.select?.name ||\n        'Active';\n\n      const owners = item.json.property_owner ||\n        item.json.properties?.Owner?.people?.map(p => p.name || p.email) ||\n        [];\n\n      const startDate = item.json.property_start_date?.start ||\n        item.json.properties?.StartDate?.date?.start || '';\n      const endDate = item.json.property_end_date?.start ||\n        item.json.properties?.EndDate?.date?.start || '';\n      const lastEdited = item.json.property_last_edited_time ||\n        item.json.last_edited_time || '';\n\n      const priority = item.json.property_priority ||\n        item.json.properties?.Priority?.select?.name ||\n        item.json.properties?.Priority?.multi_select?.[0]?.name ||\n        'Normal';\n\n      const serviceType = item.json.property_service_type ||\n        item.json.properties?.ServiceType?.select?.name || '';\n\n      const projectLinks = item.json.property_project_links ||\n        item.json.properties?.ProjectLinks?.url || [];\n\n      projects.push({\n        pageId: pageId,\n        pageIdOriginal: pageIdWithDashes,\n        client: client,\n        projectName: projectName,\n        url: item.json.url || '',\n        owners: owners,\n        ownersList: Array.isArray(owners) ? owners.join(', ') : owners,\n        status: status,\n        startDate: startDate,\n        endDate: endDate,\n        lastEditedTime: lastEdited,\n        priority: priority,\n        serviceType: serviceType,\n        projectLinks: Array.isArray(projectLinks) ? projectLinks : [projectLinks].filter(l => l),\n        hasLinks: projectLinks && (Array.isArray(projectLinks) ? projectLinks.length > 0 : true)\n      });\n    }\n  }\n\n  // Filter blocks for this client's projects\n  const clientProjectIds = projects.map(p => p.pageId);\n  const clientBlocks = blocks.filter(block => {\n    return clientProjectIds.some(projectId =>\n      block.parent?.page_id?.replace(/-/g, '') === projectId ||\n      block.page_id?.replace(/-/g, '') === projectId\n    );\n  });\n\n  console.log('Aggregate Client Data Results:', {\n    currentClient: currentClient,\n    targetChannel: targetChannel,\n    projectCount: projects.length,\n    blockCount: clientBlocks.length\n  });\n\n  // Return aggregated data for AI processing\n  return [{\n    json: {\n      currentClient: currentClient,\n      targetChannel: targetChannel,\n      projects: projects,\n      blocks: clientBlocks,\n      projectCount: projects.length,\n      blockCount: clientBlocks.length,\n      metadata: {\n        timestamp: new Date().toISOString(),\n        processedClient: currentClient,\n        targetChannel: targetChannel\n      }\n    }\n  }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [112, 1040],
      "id": "84d1e171-d32a-49de-9b9a-60821b8d1209",
      "name": "Aggregate Client Data"
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "limit": 15,
        "fetchNestedBlocks": true
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-304, 768],
      "id": "e0935005-9903-4ddf-9dcd-b4f785cc938a",
      "name": "Get Child Blocks",
      "executeOnce": false,
      "retryOnFail": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "https://www.notion.so/2626ab60b479805daf3be7f77576900a?v=2626ab60b4798122bdfc000c5a3ae2d6",
          "mode": "url"
        },
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            },
            {
              "key": "Client|select",
              "condition": "=equals",
              "selectValue": "={{ $('Split Client Rows1').item.json[\"Notion Name\"] }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-816, 848],
      "id": "7988a6a0-fc78-4707-a273-1c87f24f16c4",
      "name": "Get Notion Database Pages",
      "alwaysOutputData": true,
      "credentials": {
        "notionApi": {
          "id": "ICoPM3JY9lI1oIry",
          "name": "Notion account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "months",
              "triggerAtDayOfMonth": 15,
              "triggerAtHour": 10
            }
          ]
        }
      },
      "id": "54e08586-473f-4c2f-8d5f-dd2da0264b24",
      "name": "Daily Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [-1552, 848],
      "typeVersion": 1.2
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [416, 896],
      "id": "ccd48f82-6586-4ea4-956e-90381996e35d",
      "name": "Merge"
    },
    {
      "parameters": {
        "content": "# Email Updates",
        "height": 80,
        "width": 272
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [-1600, 736],
      "typeVersion": 1,
      "id": "ea59f166-9441-423d-b428-3c63e26b43ee",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// Sanitize LLM output (grouped-by-project) and force bullet arrays\n\nfunction extractEnvelope(payload) {\n  if (payload && typeof payload === \"object\" && payload.output && typeof payload.output === \"object\") {\n    return { kind: \"object\", value: payload.output };\n  }\n  if (Array.isArray(payload) && payload.length === 1 && payload[0] && typeof payload[0] === \"object\") {\n    if (typeof payload[0].text === \"string\") return { kind: \"text\", value: payload[0].text };\n  }\n  if (payload && typeof payload === \"object\" && typeof payload.text === \"string\") {\n    return { kind: \"text\", value: payload.text };\n  }\n  if (payload && typeof payload === \"object\") return { kind: \"object\", value: payload };\n  if (typeof payload === \"string\") return { kind: \"text\", value: payload };\n  return { kind: \"unknown\", value: payload };\n}\n\nfunction stripZeroWidth(s) { return s.replace(/[\\u200B-\\u200D\\uFEFF]/g, \"\"); }\n\nfunction stripAllFences(s) {\n  var m = s.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/i);\n  if (m && m[1]) return m[1];\n  if (s.indexOf(\"```\") === 0) s = s.replace(/^```(?:json)?\\s*/i, \"\");\n  return s;\n}\n\nfunction sliceToBraces(s) {\n  var first = s.indexOf(\"{\");\n  var last = s.lastIndexOf(\"}\");\n  if (first !== -1 && last > first) return s.slice(first, last + 1);\n  return s;\n}\n\nfunction tryParse(s) { try { return JSON.parse(s); } catch (e) { return null; } }\n\nfunction parseJsonFromText(raw) {\n  var s = String(raw).replace(/\\r\\n/g, \"\\n\");\n  s = stripZeroWidth(s).trim();\n  s = stripAllFences(s).trim();\n  s = sliceToBraces(s).trim();\n  s = s.replace(/,\\s*([\\]\\}])/g, \"$1\"); // drop trailing commas\n  var obj = tryParse(s);\n  if (obj) return obj;\n  s = s.replace(/\\s+\\:\\s+/g, \":\").replace(/\\s+\\,\\s+/g, \",\");\n  return tryParse(s);\n}\n\nfunction splitToBullets(x) {\n  if (!x) return [];\n  if (Array.isArray(x)) {\n    return x.map(function(v){ return (v == null ? \"\" : String(v).trim()); })\n            .filter(function(v){ return v.length > 0; });\n  }\n  var s = String(x);\n  // split on newlines, bullets, semicolons, sentence ends, and ' and '\n  var parts = s.split(/\\s*(?:\\n|•|-|\\u2022|;|\\. |\\sand\\s)+\\s*/i)\n               .map(function(v){ return v.trim(); })\n               .filter(function(v){ return v.length > 0; });\n  return parts;\n}\n\nfunction normalizeLinks(arr) {\n  if (!Array.isArray(arr)) return [];\n  return arr.filter(function(l){ return l && typeof l === \"object\" && l.url; })\n            .map(function(l){ return { label: l.label || \"\", url: l.url }; });\n}\n\nfunction htmlToText(html) {\n  if (!html) return \"\";\n  var t = String(html);\n  t = t.replace(/\\r\\n/g, \"\\n\");\n  t = t.replace(/<\\s*br\\s*\\/?>/gi, \"\\n\");\n  t = t.replace(/<\\/(p|div)>/gi, \"\\n\");\n  t = t.replace(/<li[^>]*>/gi, \"• \");\n  t = t.replace(/<\\/(ul|ol)>/gi, \"\\n\");\n  t = t.replace(/<a\\s+[^>]*href=['\"]([^'\"]+)['\"][^>]*>(.*?)<\\/a>/gi, \"$2 ($1)\");\n  t = t.replace(/<[^>]+>/g, \"\");\n  t = t.replace(/\\n{3,}/g, \"\\n\\n\");\n  return t.trim();\n}\n\nfunction normalizeProjects(projects) {\n  if (!Array.isArray(projects)) return [];\n  return projects.map(function(p){\n    var name = p && p.projectName ? String(p.projectName) : \"Untitled Project\";\n    return {\n      projectName: name,\n      progressCompleted: splitToBullets(p && p.progressCompleted),\n      ongoingWork:      splitToBullets(p && p.ongoingWork),\n      blockers:         splitToBullets(p && p.blockers),\n      nextSteps:        splitToBullets(p && p.nextSteps),\n      links:            normalizeLinks(p && p.links)\n    };\n  }).filter(function(p){ return !!p.projectName; });\n}\n\nvar items = $input.all();\nvar out = [];\n\nfor (var i = 0; i < items.length; i++) {\n  var payload = items[i].json;\n  var env = extractEnvelope(payload);\n  var kind = env.kind;\n  var value = env.value;\n\n  var obj = null;\n  if (kind === \"object\") obj = value;\n  if (kind === \"text\")  obj = parseJsonFromText(value);\n\n  if (!obj || typeof obj !== \"object\") {\n    out.push({ json: { __error: true, message: \"Failed to parse LLM output into JSON.\", samplePreview: (typeof value === \"string\" ? value.slice(0, 600) : value) } });\n    continue;\n  }\n\n  var sheetClient = ($(\"Split Client Rows1\").first().json || {})[\"Notion Name\"] || \"Client\";\n  var normalizedProjects = normalizeProjects(obj.projects);\n\n  var normalized = {\n    version: String(obj.version || \"1.0\"),\n    generatedAt: obj.generatedAt || new Date().toISOString(),\n    clientName: obj.clientName || sheetClient,\n    emailSubject: obj.emailSubject || (\"Bi-Weekly Update — \" + (obj.clientName || sheetClient)),\n    projects: normalizedProjects,\n    window: (obj.window && obj.window.start && obj.window.end) ? obj.window : null,\n    emailBodyHtml: obj.emailBodyHtml || \"\",\n    emailBodyText: obj.emailBodyText || \"\"\n  };\n\n  if (!normalized.emailBodyText && normalized.emailBodyHtml) {\n    normalized.emailBodyText = htmlToText(normalized.emailBodyHtml);\n  }\n  if (!normalized.emailBodyHtml && normalized.emailBodyText) {\n    var esc = normalized.emailBodyText.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");\n    normalized.emailBodyHtml = \"<p>\" + esc.split(/\\n{2,}/).map(function(p){ return p.replace(/\\n/g,\"<br>\"); }).join(\"</p><p>\") + \"</p>\";\n  }\n\n  out.push({ json: normalized });\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1248, 848],
      "id": "a7e78ad3-0352-4b26-961a-6a4a7cf93753",
      "name": "Sanitize LLM JSON"
    },
    {
      "parameters": {
        "amount": 15
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [1968, 848],
      "id": "e1445b1a-3cae-477c-aa12-138d0d0d29b0",
      "name": "Wait",
      "webhookId": "6bf2e13c-33bb-4bea-9cc6-13f40d7db89e"
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "=Bi-Weekly Status Update for {{ $('Split Client Rows1').first().json[\"Notion Name\"] }}: Completed Work, Ongoing Tasks & Next Steps",
        "emailType": "html",
        "message": "={{ $json.html }}",
        "options": {
          "ccList": "mdrahman.bfd@gmail.com, nurul.bfd@gmail.com, atharul.k@gmail.com",
          "sendTo": "={{ $('Split Client Rows1').first().json.Email }}"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [1712, 848],
      "id": "f448977e-8bd9-4af6-b8a0-3185991df012",
      "name": "Create a draft",
      "webhookId": "1accf3a9-2e77-4ea6-b969-b43e8cc9bb82",
      "credentials": {
        "gmailOAuth2": {
          "id": "1ip1BupTqy5pIJtT",
          "name": "Gmail - Redwan"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format grouped-by-project email with CARD UI (table-based, inline CSS; Outlook-safe)\n// Assumes previous node produced: { clientName, emailSubject?, projects:[{...}], window? }\n\nfunction getFirstRow() {\n  var r = $(\"Split Client Rows1\").first();\n  return (r && r.json) ? r.json : {};\n}\nfunction valOrEmpty(v){ return (typeof v === \"string\") ? v : (v == null ? \"\" : String(v)); }\n\nfunction escHtml(s){\n  return String(s).replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\");\n}\n\nfunction listToHtml(items){\n  if(!items || !items.length) return \"\";\n  var h = '<ul style=\"margin:8px 0 0 0;padding-left:20px;line-height:1.5;\">';\n  for(var i=0;i<items.length;i++){\n    var txt = items[i] ? escHtml(items[i]) : \"\";\n    h += '<li style=\"margin:4px 0;\">'+txt+'</li>';\n  }\n  h += \"</ul>\";\n  return h;\n}\n\nfunction linksToButtons(links){\n  // Render up to two as buttons, remainder as inline list\n  if(!links || !links.length) return \"\";\n  var btns = \"\";\n  var inline = \"\";\n  for(var i=0;i<links.length;i++){\n    var l = links[i];\n    if(!l || !l.url) continue;\n    var label = escHtml(l.label || l.url);\n    if(i < 2){\n      btns += ''+\n        '<a href=\"'+l.url+'\" target=\"_blank\" '+\n        'style=\"display:inline-block;background:#0ea5e9;color:#ffffff;text-decoration:none;'+\n               'padding:10px 14px;border-radius:6px;font-weight:600;font-size:14px;'+\n               'margin-right:8px;margin-bottom:8px;\">'+label+'</a>';\n    }else{\n      inline += '• <a href=\"'+l.url+'\" target=\"_blank\" style=\"color:#0ea5e9;text-decoration:underline;\">'+label+'</a><br/>';\n    }\n  }\n  var out = \"\";\n  if(btns) out += '<div style=\"margin-top:8px;\">'+btns+'</div>';\n  if(inline) out += '<div style=\"margin-top:6px;color:#111827;font-size:14px;line-height:1.5;\">'+inline+'</div>';\n  return out;\n}\n\nfunction projectCard(p){\n  var title = p.projectName ? escHtml(p.projectName) : \"Untitled Project\";\n\n  var section = function(label, list){\n    if(!list || !list.length) return \"\";\n    return ''+\n      '<tr><td style=\"padding:6px 0 0 0;color:#111827;font-weight:700;font-size:14px;\">'+escHtml(label)+'</td></tr>'+\n      '<tr><td style=\"padding:2px 0 8px 0;color:#111827;font-size:14px;\">'+listToHtml(list)+'</td></tr>';\n  };\n\n  var links = linksToButtons(p.links);\n\n  return ''+\n  '<table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" '+\n         'style=\"background:#ffffff;border:1px solid #e5e7eb;border-radius:8px;'+\n                'box-shadow:0 1px 3px rgba(0,0,0,0.06);margin:0 0 16px 0;\">'+\n    '<tr>'+\n      '<td style=\"padding:16px 16px 12px 16px;\">'+\n        '<table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">'+\n          '<tr>'+\n            '<td style=\"font-size:16px;line-height:1.2;font-weight:700;color:#111827;padding-bottom:6px;\">'+title+'</td>'+\n          '</tr>'+\n          section(\"Progress & Completed Work:\", p.progressCompleted)+\n          section(\"Ongoing Work:\", p.ongoingWork)+\n          section(\"Blockers / Challenges:\", p.blockers)+\n          section(\"Next Steps:\", p.nextSteps)+\n          (links ? '<tr><td style=\"padding-top:6px;\">'+links+'</td></tr>' : '')+\n        '</table>'+\n      '</td>'+\n    '</tr>'+\n  '</table>';\n}\n\nfunction buildHtml(ai, row){\n  var greetingName = valOrEmpty(row[\"Client First Name\"]) || valOrEmpty(ai.clientName) || valOrEmpty(row[\"Notion Name\"]) || \"there\";\n\n  var headerTitle = \"Bi-Weekly Update\";\n  var headerSub   = valOrEmpty(ai.clientName) ? escHtml(ai.clientName) : \"Project Update\";\n\n  var preheader = \"Your two-week status summary\"; // hidden preview text\n\n  var projects = Array.isArray(ai.projects) ? ai.projects : [];\n\n  var cards = \"\";\n  for(var i=0;i<projects.length;i++){\n    cards += projectCard(projects[i] || {});\n  }\n\n  var signatureHtml =\n    '<p style=\"margin:0;color:#111827;\">Best regards,<br/>'+\n    escHtml(valOrEmpty(row[\"Account Manager Name\"]) || \"Mohammed\")+'<br/>'+\n    escHtml(valOrEmpty(row[\"Company\"]) || \"BFD / SimplifAI\")+'</p>';\n\n  var footer =\n    '<p style=\"margin:16px 0 0 0;color:#6b7280;font-size:12px;line-height:1.4;\">'+\n    'Automated bi-weekly update generated from projects. Reply to this email if you have questions.'+\n    '</p>';\n\n  // Wrapper + header + column layout (single column for reliability)\n  var html = ''+\n'<!doctype html><html><head>'+\n  '<meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">'+\n  '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">'+\n  '<meta name=\"x-apple-disable-message-reformatting\">'+\n  '<title>'+escHtml(valOrEmpty(ai.emailSubject) || \"Bi-Weekly Update\")+'</title>'+\n  '<style>/* just in case some clients honor minimal CSS */'+\n  'a{color:#0ea5e9} @media only screen and (max-width:600px){ .container{width:100%!important} .p-24{padding:16px!important} }'+\n  '</style>'+\n'</head>'+\n'<body style=\"margin:0;background:#f6f9fc;\">'+\n  '<span style=\"display:none;visibility:hidden;opacity:0;height:0;width:0;overflow:hidden;\">'+escHtml(preheader)+'</span>'+\n  '<table role=\"presentation\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\" style=\"background:#f6f9fc;\">'+\n    '<tr><td align=\"center\" style=\"padding:24px 12px;\">'+\n\n      '<table role=\"presentation\" class=\"container\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"680\" style=\"width:680px;max-width:680px;\">'+\n        // header card\n        '<tr><td>'+\n          '<table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" '+\n                 'style=\"background:#ffffff;border:1px solid #e5e7eb;border-radius:10px;box-shadow:0 1px 3px rgba(0,0,0,0.06);\">'+\n            '<tr><td class=\"p-24\" style=\"padding:24px;\">'+\n              '<div style=\"font-size:20px;line-height:1.2;color:#111827;font-weight:800;margin:0 0 4px 0;\">'+escHtml(headerTitle)+'</div>'+\n              '<div style=\"font-size:14px;color:#6b7280;line-height:1.4;margin:0;\">'+headerSub+'</div>'+\n              '<div style=\"height:12px\"></div>'+\n              '<div style=\"font-size:14px;color:#111827;line-height:1.6;\">'+\n                'Hi '+escHtml(greetingName)+', here’s a quick update on our progress over the past two weeks.'+\n              '</div>'+\n            '</td></tr>'+\n          '</table>'+\n        '</td></tr>'+\n\n        '<tr><td style=\"height:16px;\"></td></tr>'+\n\n        // project cards\n        '<tr><td>'+ cards +'</td></tr>'+\n\n        '<tr><td style=\"height:8px;\"></td></tr>'+\n\n        // closing + signature\n        '<tr><td>'+\n          '<table role=\"presentation\" width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" '+\n                 'style=\"background:#ffffff;border:1px solid #e5e7eb;border-radius:10px;box-shadow:0 1px 3px rgba(0,0,0,0.06);\">'+\n            '<tr><td class=\"p-24\" style=\"padding:20px 24px;\">'+\n              '<p style=\"margin:0 0 12px 0;color:#111827;font-size:14px;line-height:1.6;\">'+\n              'We’re excited about the momentum and are on track for the next milestone. Please let us know if you’d like us to expand on any of these points.'+\n              '</p>'+ signatureHtml + footer +\n            '</td></tr>'+\n          '</table>'+\n        '</td></tr>'+\n\n        '<tr><td style=\"height:24px;\"></td></tr>'+\n      '</table>'+\n\n    '</td></tr>'+\n  '</table>'+\n'</body></html>';\n\n  return html;\n}\n\nfunction buildText(ai, row){\n  // Keep your existing plaintext layout with bullets\n  var greetingName = valOrEmpty(row[\"Client First Name\"]) || valOrEmpty(ai.clientName) || valOrEmpty(row[\"Notion Name\"]) || \"there\";\n  var text = \"Hi \" + greetingName + \", here’s a quick update on our progress over the past two weeks.\\n\\n\";\n  var projects = Array.isArray(ai.projects) ? ai.projects : [];\n\n  function listToText(items){\n    if(!items || !items.length) return \"\";\n    var s=\"\"; for(var i=0;i<items.length;i++){ s += \"• \" + String(items[i]) + \"\\n\"; }\n    return s;\n  }\n  function linksToText(links){\n    if(!links || !links.length) return \"\";\n    var s=\"\"; for(var i=0;i<links.length;i++){ var l=links[i]; if(l && l.url){ s += \"• \" + (l.label?l.label:l.url) + \" (\"+l.url+\")\\n\"; } }\n    return s;\n  }\n\n  for(var j=0;j<projects.length;j++){\n    var p = projects[j] || {};\n    var title = p.projectName ? String(p.projectName) : \"Untitled Project\";\n    text += title + \"\\n\";\n    if(p.progressCompleted && p.progressCompleted.length){\n      text += \"Progress & Completed Work:\\n\" + listToText(p.progressCompleted) + \"\\n\";\n    }\n    if(p.ongoingWork && p.ongoingWork.length){\n      text += \"Ongoing Work:\\n\" + listToText(p.ongoingWork) + \"\\n\";\n    }\n    if(p.blockers && p.blockers.length){\n      text += \"Blockers / Challenges:\\n\" + listToText(p.blockers) + \"\\n\";\n    }\n    if(p.nextSteps && p.nextSteps.length){\n      text += \"Next Steps:\\n\" + listToText(p.nextSteps) + \"\\n\";\n    }\n    if(p.links && p.links.length){\n      text += \"Links:\\n\" + linksToText(p.links) + \"\\n\";\n    }\n  }\n\n  text += \"We’re excited about the momentum and are on track for the next milestone. Please let us know if you’d like us to expand on any of these points.\\n\\n\";\n  text += \"Best regards,\\n\" + (valOrEmpty(row[\"Account Manager Name\"]) || \"Account Manager\") + \"\\n\" + (valOrEmpty(row[\"Company\"]) || \"WSI / utopiads\");\n  return text;\n}\n\n// ---- Main ----\nvar ai  = $input.first() && $input.first().json ? $input.first().json : {};\nvar row = getFirstRow();\n\nvar to  = valOrEmpty(row[\"Client Email\"]) || valOrEmpty(row[\"Primary Contact Email\"]) || valOrEmpty(row[\"Contact Email\"]) || \"client@example.com\";\nvar cc  = valOrEmpty(row[\"Account Manager Email\"]);\nvar bcc = valOrEmpty(row[\"Internal CC\"]);\n\nvar subject = valOrEmpty(ai.emailSubject);\nif(!subject){\n  var fallbackClient = valOrEmpty(ai.clientName) || valOrEmpty(row[\"Notion Name\"]) || \"Project\";\n  subject = \"Bi-Weekly Update — \" + fallbackClient;\n}\n\nvar html = buildHtml(ai, row);\nvar text = buildText(ai, row);\n\nreturn [{\n  json: {\n    to: to,\n    cc: cc,\n    bcc: bcc,\n    subject: subject,\n    html: html,\n    text: text,\n    meta: {\n      clientName: valOrEmpty(ai.clientName),\n      generatedAt: valOrEmpty(ai.generatedAt),\n      window: ai.window || null,\n      projectsCount: Array.isArray(ai.projects) ? ai.projects.length : 0\n    }\n  }\n}];\n"
      },
      "id": "c1726ae4-3604-4065-83ef-dded980f090d",
      "name": "Format Email Message",
      "type": "n8n-nodes-base.code",
      "position": [1504, 848],
      "typeVersion": 2
    }
  ],
  "pinData": {},
  "connections": {
    "Get All Client Rows": {
      "main": [
        [
          {
            "node": "Split Client Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Client Rows": {
      "main": [
        [],
        [
          {
            "node": "Get Notion Database Pages1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Slack Message1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Slack Message1": {
      "main": [
        [
          {
            "node": "Send Slack Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary1": {
      "main": [
        [
          {
            "node": "Sanitize LLM JSON1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data1": {
      "main": [
        [
          {
            "node": "Generate AI Summary1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data1": {
      "main": [
        [
          {
            "node": "Aggregate Client Data1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks1": {
      "main": [
        [
          {
            "node": "Merge Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages1": {
      "main": [
        [
          {
            "node": "Merge Data1",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Get All Client Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sanitize LLM JSON1": {
      "main": [
        [
          {
            "node": "Format Slack Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Split Client Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Client Rows1": {
      "main": [
        [
          {
            "node": "Split Client Rows1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Client Rows1": {
      "main": [
        [],
        [
          {
            "node": "Get Notion Database Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate AI Summary",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate AI Summary": {
      "main": [
        [
          {
            "node": "Sanitize LLM JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Project + Slack Data": {
      "main": [
        [
          {
            "node": "Generate AI Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Slack Channel History": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Aggregate Client Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Slack Channel History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Client Data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Child Blocks": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion Database Pages": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 1
          },
          {
            "node": "Get Child Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get All Client Rows1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Combine Project + Slack Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sanitize LLM JSON": {
      "main": [
        [
          {
            "node": "Format Email Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Split Client Rows1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a draft": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Email Message": {
      "main": [
        [
          {
            "node": "Create a draft",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "692073ee-a9c2-4d84-b61e-7fe1190fbc1a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "09dac3b1fd535c8a2e81b8c333863b71134f03a2d7b0c5fb38cc1b81fda4ce0b"
  },
  "id": "oNLZAnIk3hldyyeQ",
  "tags": [
    {
      "createdAt": "2025-08-17T20:00:58.638Z",
      "updatedAt": "2025-08-17T20:00:58.638Z",
      "id": "AcBnyW08HnPACs3E",
      "name": "Notion"
    },
    {
      "createdAt": "2025-09-03T00:47:11.256Z",
      "updatedAt": "2025-09-03T00:47:11.256Z",
      "id": "BcJApnFo4vmGYItP",
      "name": "Email Updates"
    },
    {
      "createdAt": "2025-08-17T20:01:00.158Z",
      "updatedAt": "2025-08-17T20:01:00.158Z",
      "id": "z1qNg60fa8ZXazIY",
      "name": "Slack"
    }
  ]
}
