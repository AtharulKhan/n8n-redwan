{
  "name": "Notion to Google Docs (Notion Log)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 14 * * 1,3,5"
            }
          ]
        }
      },
      "id": "756f091d-c6d6-4686-a67c-3e6743b15f82",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [-2656, -160]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "23f6ab60b47980c18179e18a888e6c30",
          "mode": "id"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Project Doc|files",
              "condition": "is_not_empty"
            },
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            }
          ]
        },
        "options": {
          "downloadFiles": false
        }
      },
      "id": "cf2d634d-960d-4eef-b69e-8f0be316f742",
      "name": "Get Pages with Google Docs",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-2464, -160],
      "credentials": {
        "notionApi": {
          "id": "Cxe4jdBPmmmzxPRZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process ALL pages and extract Google Doc IDs\nconst pages = $input.all();\nconst validPages = [];\n\nfor (const page of pages) {\n  const pageData = page.json;\n  \n  // Check if property_project_doc exists and has URLs\n  if (pageData.property_project_doc && Array.isArray(pageData.property_project_doc)) {\n    // Find Google Docs URLs in the array\n    const googleDocLink = pageData.property_project_doc.find(url => \n      url && url.includes('docs.google.com/document')\n    );\n    \n    if (googleDocLink) {\n      // Extract document ID from the URL\n      const cleanUrl = googleDocLink.split('?')[0];\n      const match = cleanUrl.match(/\\/document\\/d\\/([a-zA-Z0-9-_]+)/);\n      \n      if (match) {\n        validPages.push({\n          json: {\n            ...pageData,\n            googleDocsId: match[1],\n            googleDocsUrl: googleDocLink,\n            pageId: pageData.id\n          }\n        });\n      }\n    }\n  }\n}\n\nconsole.log(`Found ${validPages.length} valid pages with Google Docs`);\nreturn validPages;"
      },
      "id": "6939fffb-7a4a-44de-81f0-a9bdc236ea74",
      "name": "Filter & Extract Doc IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-2272, -160]
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.pageId }}",
          "mode": "id"
        },
        "returnAll": true,
        "fetchNestedBlocks": true
      },
      "id": "2d5f6d2e-7ac8-419d-b2b3-321e2d23e2cf",
      "name": "Get Page Blocks",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-2080, -160],
      "credentials": {
        "notionApi": {
          "id": "Cxe4jdBPmmmzxPRZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get all pages data from Filter & Extract Doc IDs\nconst allPages = $('Filter & Extract Doc IDs').all();\n\n// Get all blocks data from Get Page Blocks\nconst allBlocks = $input.all();\n\n// Create a map of pageId to blocks\nconst blocksByPage = {};\nfor (const blockItem of allBlocks) {\n  const block = blockItem.json;\n  // The parent_id should match our pageId\n  const parentId = block.parent?.page_id || block.parent?.database_id;\n  \n  if (!blocksByPage[parentId]) {\n    blocksByPage[parentId] = [];\n  }\n  blocksByPage[parentId].push(block);\n}\n\n// Process each page with its blocks\nconst processedPages = [];\n\nfor (const pageItem of allPages) {\n  const pageData = pageItem.json;\n  const pageBlocks = blocksByPage[pageData.pageId] || [];\n  \n  console.log(`Processing: ${pageData.property_project_name || pageData.name}`);\n  console.log(`Page ID: ${pageData.pageId}`);\n  console.log(`Blocks found: ${pageBlocks.length}`);\n  \n  // Process blocks content\n  let content = '';\n  \n  // Add separator for this update\n  content += `\\n\\n========== UPDATE: ${new Date().toISOString()} ==========\\n\\n`;\n  \n  // Add project header\n  content += `# ${pageData.property_project_name || pageData.name}\\n\\n`;\n  content += `**Client:** ${pageData.property_client || 'N/A'}\\n`;\n  content += `**Status:** ${pageData.property_status || 'N/A'}\\n`;\n  content += `**Priority:** ${pageData.property_priority || 'N/A'}\\n`;\n  \n  if (pageData.property_owner && pageData.property_owner.length > 0) {\n    content += `**Owner(s):** ${pageData.property_owner.join(', ')}\\n`;\n  }\n  \n  // Format dates properly\n  if (pageData.property_start_date) {\n    const startDate = typeof pageData.property_start_date === 'object' && pageData.property_start_date.start\n      ? pageData.property_start_date.start\n      : pageData.property_start_date;\n    content += `**Start Date:** ${startDate}\\n`;\n  }\n  \n  if (pageData.property_end_date) {\n    const endDate = typeof pageData.property_end_date === 'object' && pageData.property_end_date.start\n      ? pageData.property_end_date.start\n      : pageData.property_end_date;\n    content += `**End Date:** ${endDate}\\n`;\n  }\n  \n  content += `\\n---\\n\\n`;\n  content += `## Content from Notion Page\\n\\n`;\n  \n  // Create a map to track parent-child relationships\n  const blockMap = {};\n  const childrenMap = {};\n  const rootBlocks = [];\n  \n  // First pass: organize blocks by ID and track parent-child relationships\n  for (const block of pageBlocks) {\n    blockMap[block.id] = block;\n    \n    // Check if this is a child block\n    if (block.parent_id && block.parent_id !== pageData.pageId) {\n      // This is a child of another block\n      if (!childrenMap[block.parent_id]) {\n        childrenMap[block.parent_id] = [];\n      }\n      childrenMap[block.parent_id].push(block.id);\n    } else {\n      // This is a root-level block\n      rootBlocks.push(block);\n    }\n  }\n  \n  // Helper function to process a block and its children\n  function processBlock(block, level = 0) {\n    // Skip unsupported block types\n    if (block.type === 'unsupported') {\n      return '';\n    }\n    \n    let blockContent = '';\n    const indent = '    '.repeat(level); // Four spaces per level for better visibility\n    \n    switch (block.type) {\n      case 'paragraph':\n        if (block.content) {\n          blockContent += indent + block.content + '\\n';\n          // Add extra newline only if no children\n          if (!childrenMap[block.id]) {\n            blockContent += '\\n';\n          }\n        }\n        break;\n        \n      case 'heading_1':\n        if (block.content) {\n          blockContent += indent + '# ' + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'heading_2':\n        if (block.content) {\n          blockContent += indent + '## ' + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'heading_3':\n        if (block.content) {\n          blockContent += indent + '### ' + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'bulleted_list_item':\n        if (block.content) {\n          blockContent += indent + '• ' + block.content + '\\n';\n        }\n        break;\n        \n      case 'numbered_list_item':\n        if (block.content) {\n          blockContent += indent + '1. ' + block.content + '\\n';\n        }\n        break;\n        \n      case 'to_do':\n        // Check if block has the checked property at the root level\n        const isChecked = block.checked === true;\n        const checkbox = isChecked ? '☑' : '☐';\n        blockContent += indent + checkbox + ' ' + (block.content || '') + '\\n';\n        break;\n        \n      case 'divider':\n        blockContent += indent + '---\\n\\n';\n        break;\n        \n      case 'code':\n        if (block.content) {\n          const language = (block.code && block.code.language) || '';\n          blockContent += indent + '```' + language + '\\n';\n          const codeLines = block.content.split('\\n');\n          for (const line of codeLines) {\n            blockContent += indent + line + '\\n';\n          }\n          blockContent += indent + '```\\n\\n';\n        }\n        break;\n        \n      case 'video':\n        if (block.video && block.video.external && block.video.external.url) {\n          blockContent += indent + `[Video: ${block.video.external.url}]\\n\\n`;\n        } else if (block.content && block.content.includes('youtube.com')) {\n          // Handle video links in content\n          blockContent += indent + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'bookmark':\n        if (block.bookmark && block.bookmark.url) {\n          blockContent += indent + `[Bookmark: ${block.bookmark.url}]\\n\\n`;\n        }\n        break;\n        \n      case 'image':\n        if (block.image) {\n          if (block.image.file && block.image.file.url) {\n            blockContent += indent + `[Image: ${block.image.file.url}]\\n\\n`;\n          } else if (block.image.external && block.image.external.url) {\n            blockContent += indent + `[Image: ${block.image.external.url}]\\n\\n`;\n          }\n        }\n        break;\n        \n      default:\n        if (block.content) {\n          blockContent += indent + block.content + '\\n\\n';\n        }\n        break;\n    }\n    \n    // Process children if they exist\n    if (childrenMap[block.id] && childrenMap[block.id].length > 0) {\n      for (const childId of childrenMap[block.id]) {\n        const childBlock = blockMap[childId];\n        if (childBlock) {\n          blockContent += processBlock(childBlock, level + 1);\n        }\n      }\n      // Add extra newline after a block with children\n      if (block.type !== 'to_do' && block.type !== 'bulleted_list_item' && block.type !== 'numbered_list_item') {\n        blockContent += '\\n';\n      }\n    }\n    \n    return blockContent;\n  }\n  \n  // Process only root-level blocks\n  for (const block of rootBlocks) {\n    content += processBlock(block, 0);\n  }\n  \n  // Add timestamp at the end\n  content += `\\n\\n---\\n_Last synced from Notion: ${new Date().toISOString()}_\\n\\n`;\n  \n  // Add processed page to results\n  processedPages.push({\n    json: {\n      pageData: pageData,\n      pageId: pageData.pageId,\n      content: content,\n      googleDocsId: pageData.googleDocsId,\n      projectName: pageData.property_project_name || pageData.name\n    }\n  });\n}\n\nreturn processedPages;"
      },
      "id": "26e11901-db2b-4965-aff8-be74a0e5bf78",
      "name": "Process All Blocks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1888, -160]
    },
    {
      "parameters": {
        "url": "=https://docs.googleapis.com/v1/documents/{{ $json.googleDocsId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDocsOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "includeTabsContent",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "e9fe1577-4f41-4ef9-8388-b669f3946827",
      "name": "Get All Docs Tabs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1696, -160],
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "p9mVXK6rnUQkV5hm",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the processed pages from Process All Blocks\nconst processedPages = $('Process All Blocks').all();\n\n// Get all docs tabs\nconst allDocsTabs = $input.all();\n\n// Create a map of googleDocsId to tabs\nconst tabsByDocId = {};\nfor (let i = 0; i < allDocsTabs.length; i++) {\n  const docData = allDocsTabs[i].json;\n  // Match by index since they're processed in the same order\n  const correspondingPage = processedPages[i].json;\n  tabsByDocId[correspondingPage.googleDocsId] = docData.tabs || [];\n}\n\n// Combine the data\nconst finalData = [];\nfor (const pageItem of processedPages) {\n  const pageData = pageItem.json;\n  const docTabs = tabsByDocId[pageData.googleDocsId] || [];\n  \n  finalData.push({\n    json: {\n      ...pageData,\n      docTabs: docTabs\n    }\n  });\n}\n\nreturn finalData;"
      },
      "id": "d5265600-1512-4d2c-95b6-f2e941197ec7",
      "name": "Merge Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1504, -160]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a631457c-1771-4b70-8183-f9ef6fb2a571",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-1312, -160]
    },
    {
      "parameters": {
        "jsCode": "// Get the current item data\nconst processedData = $input.item.json;\n\n// Function to find tab by title\nfunction findTabByTitle(tabs, title) {\n  for (const tab of tabs) {\n    if (tab.tabProperties && tab.tabProperties.title === title) {\n      return tab;\n    }\n    // Check child tabs\n    if (tab.childTabs && tab.childTabs.length > 0) {\n      const found = findTabByTitle(tab.childTabs, title);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n// Find the \"Notion Log\" tab\nconst notionLogTab = findTabByTitle(processedData.docTabs, \"Notion Log\");\n\nif (!notionLogTab) {\n  return {\n    error: true,\n    message: \"No 'Notion Log' tab found in the document\",\n    projectName: processedData.projectName,\n    documentId: processedData.googleDocsId\n  };\n}\n\n// The marker we're looking for\nconst replaceMarker = '[Replace Here]';\n\n// Replace [Replace Here] with [Replace Here] + new content + line break\n// This adds new content right after the marker, pushing old content down\nconst requestBody = {\n  requests: [\n    {\n      replaceAllText: {\n        containsText: {\n          text: replaceMarker,\n          matchCase: true\n        },\n        replaceText: replaceMarker + processedData.content,\n        tabsCriteria: {\n          tabIds: [notionLogTab.tabProperties.tabId]\n        }\n      }\n    }\n  ]\n};\n\nreturn {\n  url: `https://docs.googleapis.com/v1/documents/${processedData.googleDocsId}:batchUpdate`,\n  body: requestBody,\n  documentId: processedData.googleDocsId,\n  projectName: processedData.projectName,\n  error: false\n};"
      },
      "id": "9fcd9c0b-678d-41bf-ac62-fcbfa75a5da8",
      "name": "Prepare Update Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1120, -160]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "c5b6d1e5-4321-4d8a-b7e9-8f9a0c1e2d3f",
              "leftValue": "={{ $json.error }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8c8e7262-b32c-48f1-8429-517ab657d6c7",
      "name": "Check Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [-928, -160]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDocsOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.body }}",
        "options": {}
      },
      "id": "dd87ac78-ad35-43a0-bf92-f79d604a04bf",
      "name": "Update Google Doc",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-736, -192],
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "p9mVXK6rnUQkV5hm",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "content": "## v17 - Fixed Multiple Issues:\n\n1. **Fixed**: Checked/unchecked status now properly detected\n2. **Fixed**: Date formatting for start/end dates\n3. **Fixed**: Parent-child detection using parent_id field\n4. **Fixed**: Video links handled properly\n5. **Added**: Image block support\n6. **Improved**: Indentation to 4 spaces for clarity\n\n## Key fixes:\n- Uses block.checked property directly\n- Handles date objects with .start property\n- Uses parent_id field for hierarchy\n- Processes root blocks separately\n\n## Example output:\n☐ Test\n    ☐ Test1\n    ☑ Test2\n        • Nested content",
        "height": 460,
        "width": 400,
        "color": 4
      },
      "id": "7eb65d6a-ca5b-4fa4-89a2-decaf9c397c2",
      "name": "Workflow Notes v16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-2656, 64]
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Pages with Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pages with Google Docs": {
      "main": [
        [
          {
            "node": "Filter & Extract Doc IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter & Extract Doc IDs": {
      "main": [
        [
          {
            "node": "Get Page Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Page Blocks": {
      "main": [
        [
          {
            "node": "Process All Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process All Blocks": {
      "main": [
        [
          {
            "node": "Get All Docs Tabs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Docs Tabs": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "Prepare Update Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Update Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update Request": {
      "main": [
        [
          {
            "node": "Check Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Error": {
      "main": [
        [
          {
            "node": "Update Google Doc",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Google Doc": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f9cdec1f-c3e7-4a59-ae30-c0fe6ee05b88",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2efa5938083771b4d785493a72a1260e2d219f189831803c18b6cc9cfe083380"
  },
  "id": "mVREFUjYwi50a8HT",
  "tags": []
}