{
  "name": "Notion to Google Docs (Notion Log)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 14 * * 4"
            }
          ]
        }
      },
      "id": "537995b2-461b-42cb-be11-53a23efd2f9d",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [-2656, 128]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": {
          "__rl": true,
          "value": "23f6ab60b47980c18179e18a888e6c30",
          "mode": "id"
        },
        "returnAll": true,
        "filterType": "manual",
        "matchType": "allFilters",
        "filters": {
          "conditions": [
            {
              "key": "Project Doc|files",
              "condition": "is_not_empty"
            },
            {
              "key": "Active?|select",
              "condition": "equals",
              "selectValue": "Active"
            }
          ]
        },
        "options": {
          "downloadFiles": false
        }
      },
      "id": "8a37d63d-53ef-4a2b-9c9c-792b8d6a470c",
      "name": "Get Pages with Google Docs",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-2464, 128],
      "credentials": {
        "notionApi": {
          "id": "Cxe4jdBPmmmzxPRZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process ALL pages and extract Google Doc IDs\nconst pages = $input.all();\nconst validPages = [];\n\nfor (const page of pages) {\n  const pageData = page.json;\n  \n  // Check if property_project_doc exists and has URLs\n  if (pageData.property_project_doc && Array.isArray(pageData.property_project_doc)) {\n    // Find Google Docs URLs in the array\n    const googleDocLink = pageData.property_project_doc.find(url => \n      url && url.includes('docs.google.com/document')\n    );\n    \n    if (googleDocLink) {\n      // Extract document ID from the URL\n      const cleanUrl = googleDocLink.split('?')[0];\n      const match = cleanUrl.match(/\\/document\\/d\\/([a-zA-Z0-9-_]+)/);\n      \n      if (match) {\n        validPages.push({\n          json: {\n            ...pageData,\n            googleDocsId: match[1],\n            googleDocsUrl: googleDocLink,\n            pageId: pageData.id\n          }\n        });\n      }\n    }\n  }\n}\n\nconsole.log(`Found ${validPages.length} valid pages with Google Docs`);\nreturn validPages;"
      },
      "id": "05ccb2b5-49cd-4967-83dc-11c51b6c2aab",
      "name": "Filter & Extract Doc IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-2272, 128]
    },
    {
      "parameters": {
        "resource": "block",
        "operation": "getAll",
        "blockId": {
          "__rl": true,
          "value": "={{ $json.pageId }}",
          "mode": "id"
        },
        "returnAll": true,
        "fetchNestedBlocks": true
      },
      "id": "3a0ebf0f-aa10-4592-8b44-a2675ce5c5b6",
      "name": "Get Page Blocks",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [-2080, 128],
      "credentials": {
        "notionApi": {
          "id": "Cxe4jdBPmmmzxPRZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get all pages data from Filter & Extract Doc IDs\nconst allPages = $('Filter & Extract Doc IDs').all();\n\n// Get all blocks data from Get Page Blocks\nconst allBlocks = $input.all();\n\n// Create a map of pageId to blocks\nconst blocksByPage = {};\nfor (const blockItem of allBlocks) {\n  const block = blockItem.json;\n  // For blocks, get the page ID from parent structure\n  const parentPageId = block.parent?.page_id || block.parent?.database_id || block.root_id;\n  \n  if (!blocksByPage[parentPageId]) {\n    blocksByPage[parentPageId] = [];\n  }\n  blocksByPage[parentPageId].push(block);\n}\n\n// Process each page with its blocks\nconst processedPages = [];\n\nfor (const pageItem of allPages) {\n  const pageData = pageItem.json;\n  const pageBlocks = blocksByPage[pageData.pageId] || [];\n  \n  console.log(`Processing: ${pageData.property_project_name || pageData.name}`);\n  console.log(`Page ID: ${pageData.pageId}`);\n  console.log(`Blocks found: ${pageBlocks.length}`);\n  \n  // Process blocks content\n  let content = '';\n  \n  // Add separator for this update\n  content += `\\n\\n========== UPDATE: ${new Date().toISOString()} ==========\\n\\n`;\n  \n  // Add project header\n  content += `# ${pageData.property_project_name || pageData.name}\\n\\n`;\n  content += `**Client:** ${pageData.property_client || 'N/A'}\\n`;\n  content += `**Status:** ${pageData.property_status || 'N/A'}\\n`;\n  content += `**Priority:** ${pageData.property_priority || 'N/A'}\\n`;\n  \n  if (pageData.property_owner && pageData.property_owner.length > 0) {\n    content += `**Owner(s):** ${pageData.property_owner.join(', ')}\\n`;\n  }\n  \n  // Format dates properly\n  if (pageData.property_start_date) {\n    const startDate = typeof pageData.property_start_date === 'object' && pageData.property_start_date.start\n      ? pageData.property_start_date.start\n      : pageData.property_start_date;\n    content += `**Start Date:** ${startDate}\\n`;\n  }\n  \n  if (pageData.property_end_date) {\n    const endDate = typeof pageData.property_end_date === 'object' && pageData.property_end_date.start\n      ? pageData.property_end_date.start\n      : pageData.property_end_date;\n    content += `**End Date:** ${endDate}\\n`;\n  }\n  \n  content += `\\n---\\n\\n`;\n  content += `## Content from Notion Page\\n\\n`;\n  \n  // Create maps to track blocks and their relationships\n  const blockMap = {};\n  const childrenMap = {};\n  const processedBlocks = new Set();\n  \n  // First pass: organize blocks by ID and track parent-child relationships\n  for (const block of pageBlocks) {\n    blockMap[block.id] = block;\n    \n    // Use parent_id field to establish parent-child relationships\n    if (block.parent_id && block.parent_id !== pageData.pageId) {\n      if (!childrenMap[block.parent_id]) {\n        childrenMap[block.parent_id] = [];\n      }\n      childrenMap[block.parent_id].push(block.id);\n    }\n  }\n  \n  console.log('Block hierarchy:', JSON.stringify(childrenMap, null, 2));\n  \n  // Helper function to process a block and its children\n  function processBlock(block, level = 0) {\n    // Avoid processing the same block twice\n    if (processedBlocks.has(block.id)) {\n      return '';\n    }\n    processedBlocks.add(block.id);\n    \n    // Skip unsupported block types\n    if (block.type === 'unsupported' || block.type === 'child_page' || block.type === 'child_database') {\n      return '';\n    }\n    \n    let blockContent = '';\n    const indent = '    '.repeat(level); // Four spaces per level\n    \n    switch (block.type) {\n      case 'paragraph':\n        if (block.content) {\n          blockContent += indent + block.content + '\\n';\n          // Add extra newline only if no children\n          if (!block.has_children) {\n            blockContent += '\\n';\n          }\n        }\n        break;\n        \n      case 'heading_1':\n        if (block.content) {\n          blockContent += indent + '# ' + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'heading_2':\n        if (block.content) {\n          blockContent += indent + '## ' + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'heading_3':\n        if (block.content) {\n          blockContent += indent + '### ' + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'bulleted_list_item':\n        if (block.content) {\n          blockContent += indent + '• ' + block.content + '\\n';\n        }\n        break;\n        \n      case 'numbered_list_item':\n        if (block.content) {\n          blockContent += indent + '1. ' + block.content + '\\n';\n        }\n        break;\n        \n      case 'to_do':\n        // Check if block has the checked property\n        const isChecked = block.checked === true;\n        const checkbox = isChecked ? '☑' : '☐';\n        blockContent += indent + checkbox + ' ' + (block.content || '') + '\\n';\n        break;\n        \n      case 'divider':\n        blockContent += indent + '---\\n\\n';\n        break;\n        \n      case 'code':\n        if (block.content) {\n          const language = (block.code && block.code.language) || '';\n          blockContent += indent + '```' + language + '\\n';\n          const codeLines = block.content.split('\\n');\n          for (const line of codeLines) {\n            blockContent += indent + line + '\\n';\n          }\n          blockContent += indent + '```\\n\\n';\n        }\n        break;\n        \n      case 'video':\n        if (block.video && block.video.external && block.video.external.url) {\n          blockContent += indent + `[Video: ${block.video.external.url}]\\n\\n`;\n        } else if (block.content && block.content.includes('youtube.com')) {\n          blockContent += indent + block.content + '\\n\\n';\n        }\n        break;\n        \n      case 'bookmark':\n        if (block.bookmark && block.bookmark.url) {\n          blockContent += indent + `[Bookmark: ${block.bookmark.url}]\\n\\n`;\n        }\n        break;\n        \n      case 'image':\n        // Skip image blocks as requested\n        break;\n        \n      default:\n        if (block.content) {\n          blockContent += indent + block.content + '\\n\\n';\n        }\n        break;\n    }\n    \n    // Process children if they exist (based on has_children flag and childrenMap)\n    if (block.has_children && childrenMap[block.id]) {\n      const children = childrenMap[block.id];\n      for (const childId of children) {\n        const childBlock = blockMap[childId];\n        if (childBlock) {\n          blockContent += processBlock(childBlock, level + 1);\n        }\n      }\n    }\n    \n    // Add spacing after list items with children\n    if (block.has_children && (block.type === 'to_do' || block.type === 'bulleted_list_item' || block.type === 'numbered_list_item')) {\n      blockContent += '\\n';\n    }\n    \n    return blockContent;\n  }\n  \n  // Process only top-level blocks (direct children of the page)\n  for (const block of pageBlocks) {\n    // Only process if it's a direct child of the page (not a child of another block)\n    const isTopLevel = !block.parent_id || block.parent_id === pageData.pageId || \n                      (block.parent && (block.parent.type === 'page_id' || block.parent.type === 'database_id'));\n    \n    if (isTopLevel && !processedBlocks.has(block.id)) {\n      content += processBlock(block, 0);\n    }\n  }\n  \n  // Add timestamp at the end\n  content += `\\n\\n---\\n_Last synced from Notion: ${new Date().toISOString()}_\\n\\n`;\n  \n  // Add processed page to results\n  processedPages.push({\n    json: {\n      pageData: pageData,\n      pageId: pageData.pageId,\n      content: content,\n      googleDocsId: pageData.googleDocsId,\n      projectName: pageData.property_project_name || pageData.name\n    }\n  });\n}\n\nreturn processedPages;"
      },
      "id": "b733fc99-2b89-472c-870d-9557b162774a",
      "name": "Process All Blocks",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1888, 128]
    },
    {
      "parameters": {
        "url": "=https://docs.googleapis.com/v1/documents/{{ $json.googleDocsId }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDocsOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "includeTabsContent",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "738ab603-8bb5-4335-85c2-2f4f5dfa1e75",
      "name": "Get All Docs Tabs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1696, 128],
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "p9mVXK6rnUQkV5hm",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Get the processed pages from Process All Blocks\nconst processedPages = $('Process All Blocks').all();\n\n// Get all docs tabs\nconst allDocsTabs = $input.all();\n\n// Create a map of googleDocsId to tabs\nconst tabsByDocId = {};\nfor (let i = 0; i < allDocsTabs.length; i++) {\n  const docData = allDocsTabs[i].json;\n  // Match by index since they're processed in the same order\n  const correspondingPage = processedPages[i].json;\n  tabsByDocId[correspondingPage.googleDocsId] = docData.tabs || [];\n}\n\n// Combine the data\nconst finalData = [];\nfor (const pageItem of processedPages) {\n  const pageData = pageItem.json;\n  const docTabs = tabsByDocId[pageData.googleDocsId] || [];\n  \n  finalData.push({\n    json: {\n      ...pageData,\n      docTabs: docTabs\n    }\n  });\n}\n\nreturn finalData;"
      },
      "id": "6be31912-79a8-4b1b-adc6-bcb4f9cedbe0",
      "name": "Merge Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1504, 128]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "eea09331-a0f9-431c-936b-1600ec403cbe",
      "name": "Split In Batches",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [-1312, 128]
    },
    {
      "parameters": {
        "jsCode": "// Get the current item data\nconst processedData = $input.item.json;\n\n// Function to find tab by title\nfunction findTabByTitle(tabs, title) {\n  for (const tab of tabs) {\n    if (tab.tabProperties && tab.tabProperties.title === title) {\n      return tab;\n    }\n    // Check child tabs\n    if (tab.childTabs && tab.childTabs.length > 0) {\n      const found = findTabByTitle(tab.childTabs, title);\n      if (found) return found;\n    }\n  }\n  return null;\n}\n\n// Find the \"Notion Log\" tab\nconst notionLogTab = findTabByTitle(processedData.docTabs, \"Notion Log\");\n\nif (!notionLogTab) {\n  return {\n    error: true,\n    message: \"No 'Notion Log' tab found in the document\",\n    projectName: processedData.projectName,\n    documentId: processedData.googleDocsId\n  };\n}\n\n// The marker we're looking for\nconst replaceMarker = '[Replace Here]';\n\n// Replace [Replace Here] with [Replace Here] + new content + line break\n// This adds new content right after the marker, pushing old content down\nconst requestBody = {\n  requests: [\n    {\n      replaceAllText: {\n        containsText: {\n          text: replaceMarker,\n          matchCase: true\n        },\n        replaceText: replaceMarker + processedData.content,\n        tabsCriteria: {\n          tabIds: [notionLogTab.tabProperties.tabId]\n        }\n      }\n    }\n  ]\n};\n\nreturn {\n  url: `https://docs.googleapis.com/v1/documents/${processedData.googleDocsId}:batchUpdate`,\n  body: requestBody,\n  documentId: processedData.googleDocsId,\n  projectName: processedData.projectName,\n  error: false\n};"
      },
      "id": "6e3bf3ab-e6aa-437c-a8af-46bf4de5b15c",
      "name": "Prepare Update Request",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1120, 128],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "c5b6d1e5-4321-4d8a-b7e9-8f9a0c1e2d3f",
              "leftValue": "={{ $json.error }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "8e3807a5-efe0-4dfa-9dc6-a01cc0a9f7d2",
      "name": "Check Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.1,
      "position": [-928, 128],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDocsOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.body }}",
        "options": {}
      },
      "id": "9366d8ab-f724-4f94-8a35-2e5a74ed159d",
      "name": "Update Google Doc",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-736, 96],
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "p9mVXK6rnUQkV5hm",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "content": "## v18 - Better Parent-Child Detection:\n\n1. **Uses parent_id field**: Properly detects parent-child relationships\n2. **Uses has_children flag**: Checks if a block has children before processing\n3. **Prevents duplicate processing**: Tracks processed blocks\n4. **Debug logging**: Logs hierarchy for troubleshooting\n5. **Multiple parent ID sources**: Checks parent.page_id, parent.database_id, and root_id\n6. **Removed image handling**: As requested\n\n## Key improvements:\n- Better parent detection logic\n- Uses both parent_id and has_children\n- Avoids processing blocks twice\n- Adds spacing after list items with children",
        "height": 460,
        "width": 400,
        "color": 4
      },
      "id": "b2f5b292-f5d1-409f-a65f-3a7ae4504949",
      "name": "Workflow Notes v18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-2656, 352]
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get Pages with Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pages with Google Docs": {
      "main": [
        [
          {
            "node": "Filter & Extract Doc IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter & Extract Doc IDs": {
      "main": [
        [
          {
            "node": "Get Page Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Page Blocks": {
      "main": [
        [
          {
            "node": "Process All Blocks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process All Blocks": {
      "main": [
        [
          {
            "node": "Get All Docs Tabs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get All Docs Tabs": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "Prepare Update Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Update Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Update Request": {
      "main": [
        [
          {
            "node": "Check Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Error": {
      "main": [
        [
          {
            "node": "Update Google Doc",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Google Doc": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0e543b8f-2272-42ec-b277-0d18259449af",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2efa5938083771b4d785493a72a1260e2d219f189831803c18b6cc9cfe083380"
  },
  "id": "mVREFUjYwi50a8HT",
  "tags": []
}
