{
  "name": "Fireflies to TickTick",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fireflies-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "855441d9-1b08-444e-9cd5-3107b092e42f",
      "name": "Fireflies Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-640, 128],
      "webhookId": "fireflies-transcript-webhook"
    },
    {
      "parameters": {
        "url": "https://api.ticktick.com/open/v1/project",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "options": {}
      },
      "id": "74d319f1-8663-4eac-b8f1-3619009713be",
      "name": "Get TickTick Projects",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-448, 128],
      "credentials": {
        "oAuth2Api": {
          "id": "0nE0TkBrwzqPiuMc",
          "name": "TickTick"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine transcript and projects data for AI processing\n\n// 1) Safely read transcript from webhook payload\nconst webhook = $('Fireflies Webhook').item.json;\nconst transcript =\n  webhook?.body?.data?.transcript ??\n  webhook?.transcript ?? // fallback if you ever pass a flattened payload\n  \"\";\n\n// 2) Collect all project objects from the HTTP node (it returns many items)\nconst projectItems = $('Get TickTick Projects').all().map(i => i.json);\n\n// 3) Format projects list for the AI prompt\nconst projectsList = projectItems.length\n  ? projectItems.map(p => `- ${p.name} (ID: ${p.id})`).join('\\n')\n  : \"- No projects found\";\n\n// 4) Today and default due date (tomorrow 9am)\nconst now = new Date();\nconst due = new Date(now);\ndue.setDate(due.getDate() + 1);\ndue.setHours(9, 0, 0, 0);\n\nreturn [{\n  json: {\n    transcript,\n    projects: projectItems,                // pass the full array to the AI\n    projectsList,\n    todayDate: now.toISOString().split('T')[0],\n    defaultDueDate: due.toISOString()\n  }\n}];\n"
      },
      "id": "f7e57c08-2cf6-4130-b1a9-5ba1905beb8c",
      "name": "Combine Data for AI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-240, 128]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert task-extraction agent for TickTick.\n\nROLE\n- Extract action items assigned to Mohammed Khan (aka: Mo, Mohamed, Redwan).\n- Produce richly detailed tasks with correct due dates/times (America/Toronto).\n\nCONTEXT\n- Today's date (ISO, local to America/Toronto): {{ $json.todayDate }}\n- Default due date (tomorrow at 09:00 local, ISO): {{ $json.defaultDueDate }}\n- Time zone to assume for all dates/times: America/Toronto\n- Projects (human-readable):\n{{ $json.projectsList }}\n\n- PROJECTS_JSON (machine-readable; use to resolve IDs precisely):\n{{ JSON.stringify($json.projects) }}\n\n- TRANSCRIPT:\n{{ $json.transcript }}\n\nDATE/TIME INTERPRETATION RULES  (VERY IMPORTANT)\n- Base calendar: America/Toronto (consider DST).\n- Convert all relative phrases to an exact calendar timestamp in America/Toronto.\n- Output `dueDate` as full ISO-8601 with a numeric UTC offset, e.g. `2025-09-08T05:00:00-04:00`\n  (do NOT include milliseconds).\n- If an explicit date is stated, use it. If a day name is stated, resolve to the *next* occurrence of that weekday (relative to today's date).\n- If only a vague time-of-day is given, map as:\n  - “morning” → 09:00\n  - “noon” → 12:00\n  - “afternoon” → 15:00\n  - “evening” / “tonight” / “later this evening” → 20:00\n  - “EOD” / “COB” / “by [day]” (no time) → 17:00 on the specified day\n  - “ASAP” → tomorrow at 09:00\n- If a time is given without am/pm, infer from context; otherwise:\n  - 1–6 → a.m.\n  - 7–11 → a.m. if “morning” is mentioned, else p.m.\n  - 12 → noon (12:00)\n  - 5 without context (“5”) → 17:00 (5 p.m.)\n- Examples (assume today = {{ $json.todayDate }}, TZ=America/Toronto):\n  - “Monday 5 a.m.” → that coming Monday at 05:00 **local** → e.g., 2025-09-08T05:00:00-04:00\n  - “tomorrow at 8 p.m.” → tomorrow 20:00 local\n  - “end of month” → last day of this month at 17:00 local\n- If both a specific time and a vague phrase appear, prefer the specific time.\n- If no date/time is given, use the default: {{ $json.defaultDueDate }} (tomorrow 09:00 local).\n\nTASK SELECTION\n- Only include tasks clearly assigned to Mohammed Khan (Mo/Mohamed/Redwan) or requests directed at him (“Can you…”, “Please…”).\n- Ignore FYIs or ideas not assigned to him.\n- De-duplicate near-identical tasks; merge details.\n\nPROJECT MAPPING\n- Choose the most relevant project by name/intent.\n- Resolve the **exact** `projectId` from PROJECTS_JSON by name match.\n- If unclear, use the first project in the list as default and set `projectName` accordingly.\n\nPRIORITY\n- High (5): urgent/ASAP, deadlines within 24–48h, critical impact.\n- Medium (3): normal work.\n- Low (1): “when you can” or no urgency.\n(Only return 1, 3, or 5.)\n\nRICH CONTENT REQUIREMENTS\nFor each task, write a detailed `content` that includes:\n- 1–2 sentence summary of the ask (who asked, for what, and why).\n- Any key constraints (date, budget, dependencies).\n- Bullet list of next steps / acceptance criteria.\n- If the transcript mentions URLs, people, or tools, include them inline.\n\nOUTPUT FORMAT (STRICT JSON ONLY)\nReturn ONLY this JSON (no prose before/after):\n\n{\n  \"tasks\": [\n    {\n      \"title\": \"string, ≤100 chars, imperative and specific\",\n      \"content\": \"multi-paragraph or bullet-rich details as described above\",\n      \"projectId\": \"string from PROJECTS_JSON\",\n      \"projectName\": \"string from projects list\",\n      \"dueDate\": \"YYYY-MM-DDTHH:mm:ss±HH:MM (America/Toronto local time converted to offset; no milliseconds)\",\n      \"priority\": 1 | 3 | 5,\n      \"timeZone\": \"America/Toronto\"\n    }\n  ]\n}\n\nVALIDATION\n- Ensure `projectId` and `projectName` are consistent.\n- Ensure `dueDate` matches the intended local time (e.g., “Monday 5 a.m.” → 05:00 local; include correct DST offset like -04:00).\n- If no valid tasks are found, return: { \"tasks\": [] }\n",
        "hasOutputParser": true,
        "batching": {}
      },
      "id": "3babf3fd-f50c-4097-bf3b-152cc4bd6523",
      "name": "Extract Tasks with AI",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [-112, 16],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "temperature": 0.2
        }
      },
      "id": "33650f61-f0ce-4c82-93aa-3c82d5bc1d21",
      "name": "OpenRouter Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [-112, 320],
      "credentials": {
        "openRouterApi": {
          "id": "Dtio4gg1Ugl5jouc",
          "name": "OpenRouter Final"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"tasks\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\": { \"type\": \"string\", \"maxLength\": 100 },\n          \"content\": { \"type\": \"string\" },\n          \"projectId\": { \"type\": \"string\" },\n          \"projectName\": { \"type\": \"string\" },\n          \"dueDate\": { \"type\": \"string\", \"format\": \"date-time\" },\n          \"priority\": { \"type\": \"integer\", \"enum\": [1, 3, 5] }\n        },\n        \"required\": [\"title\", \"content\", \"projectId\", \"dueDate\", \"priority\"]\n      }\n    }\n  },\n  \"required\": [\"tasks\"]\n}\n",
        "autoFix": true
      },
      "id": "26535deb-7d02-45fc-9918-629b5d39175d",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [32, 464]
    },
    {
      "parameters": {
        "jsCode": "/**\n * Prepare Tasks for API (n8n Code node - JavaScript)\n * - Expects input shape: { output: { tasks: [...] } } OR { tasks: [...] }\n * - Returns one item per task with TickTick-ready fields\n */\n\nconst DEFAULT_TZ = \"America/Toronto\";\n\n// ---------- Helpers ----------\nconst toStr = (v) => (v == null ? \"\" : String(v));\nconst toInt = (v, fallback = 3) => {\n  const n = Number(v);\n  return [0, 1, 3, 5].includes(n) ? n : fallback; // TickTick allows 0/1/3/5; we mostly use 1/3/5\n};\n\n/**\n * Build a local-time Date parts object for a given Date in a target timeZone.\n * Uses Intl to get wall-clock components.\n */\nfunction getLocalParts(date, timeZone = DEFAULT_TZ) {\n  const fmt = new Intl.DateTimeFormat(\"en-CA\", {\n    timeZone,\n    year: \"numeric\",\n    month: \"2-digit\",\n    day: \"2-digit\",\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: false,\n  });\n  return Object.fromEntries(fmt.formatToParts(date).map(p => [p.type, p.value]));\n}\n\n/**\n * Compute the numeric timezone offset (in minutes) for a local wall time.\n * We reconstruct a Date from local parts, then compare to UTC.\n */\nfunction offsetMinutesForLocal(parts) {\n  const local = new Date(`${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}.000Z`);\n  // The above line treats the string as UTC; we need a stable reference.\n  // Instead, create a Date in the system tz and calculate offset using UTC components.\n  const sys = new Date(`${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}`);\n  const utcMs = Date.UTC(\n    sys.getUTCFullYear(),\n    sys.getUTCMonth(),\n    sys.getUTCDate(),\n    sys.getUTCHours(),\n    sys.getUTCMinutes(),\n    sys.getUTCSeconds(),\n  );\n  const offsetMin = Math.round((sys.getTime() - utcMs) / 60000);\n  return offsetMin;\n}\n\n/**\n * Format to TickTick datetime \"yyyy-MM-dd'T'HH:mm:ssZ\" for a given Instant,\n * rendered in the provided timeZone.\n */\nfunction toTickTickDate(isoString, timeZone = DEFAULT_TZ) {\n  if (!isoString) return undefined;\n  try {\n    const date = new Date(isoString);\n    const parts = getLocalParts(date, timeZone);\n    const offsetMin = offsetMinutesForLocal(parts);\n    const sign = offsetMin >= 0 ? \"+\" : \"-\";\n    const abs = Math.abs(offsetMin);\n    const hh = String(Math.floor(abs / 60)).padStart(2, \"0\");\n    const mm = String(abs % 60).padStart(2, \"0\");\n    return `${parts.year}-${parts.month}-${parts.day}T${parts.hour}:${parts.minute}:${parts.second}${sign}${hh}${mm}`;\n  } catch {\n    // Fallback to simple Z (no ms)\n    const d = new Date(isoString);\n    return d.toISOString().replace(\".000Z\", \"Z\");\n  }\n}\n\n/**\n * Build \"tomorrow 09:00:00\" in target TZ and return TickTick-formatted string\n */\nfunction defaultDueTomorrow9(timeZone = DEFAULT_TZ) {\n  const now = new Date();\n  const partsNow = getLocalParts(now, timeZone);\n  // Make a Date for local midnight\n  const localMidnight = new Date(`${partsNow.year}-${partsNow.month}-${partsNow.day}T00:00:00`);\n  // Add 1 day, set 09:00:00 local\n  const tomorrow = new Date(localMidnight.getTime() + 24 * 60 * 60 * 1000);\n  const yyyy = tomorrow.getFullYear();\n  const mm = String(tomorrow.getMonth() + 1).padStart(2, \"0\");\n  const dd = String(tomorrow.getDate()).padStart(2, \"0\");\n  const localNine = `${yyyy}-${mm}-${dd}T09:00:00.000Z`; // ISO base; we re-render below\n  return toTickTickDate(localNine, timeZone);\n}\n\n/**\n * Simple reminder policy by priority\n * - High (5): 1h before & at time\n * - Medium (3): 30m before\n * - Low/None (1/0): at time\n */\nfunction remindersForPriority(p) {\n  if (p === 5) return [\"TRIGGER:PT1H\", \"TRIGGER:PT0S\"];\n  if (p === 3) return [\"TRIGGER:PT30M\"];\n  return [\"TRIGGER:PT0S\"];\n}\n\n// ---------- Read input ----------\nconst incoming = $input.first()?.json ?? {};\nconst tasks = incoming.output?.tasks ?? incoming.tasks ?? [];\n\nif (!Array.isArray(tasks) || tasks.length === 0) {\n  // Return no items (avoid creating empty placeholder items)\n  return [];\n}\n\n// ---------- Transform ----------\nreturn tasks.map((task) => {\n  const title = toStr(task.title).slice(0, 100);\n  const content = toStr(task.content);\n  const projectId = toStr(task.projectId);\n  const projectName = toStr(task.projectName);\n  const priority = toInt(task.priority, 3);\n  const timeZone = toStr(task.timeZone) || DEFAULT_TZ;\n\n  // Use provided dueDate or default to tomorrow 9am local time\n  const dueTicktick = task.dueDate\n    ? toTickTickDate(toStr(task.dueDate), timeZone)\n    : defaultDueTomorrow9(timeZone);\n\n  return {\n    json: {\n      // Required by your HTTP node / TickTick\n      title,\n      content,\n      projectId,\n      dueDate: dueTicktick,\n      priority,\n      timeZone,\n\n      // Nice-to-have fields\n      reminders: remindersForPriority(priority),\n\n      // Internal metadata (not sent by TickTick back)\n      _metadata: {\n        projectName,\n        source: \"Fireflies Transcript\",\n        extractedAt: new Date().toISOString(),\n      },\n    },\n  };\n});\n"
      },
      "id": "f7c1b3e8-d5c7-4769-ac3e-4a97a714cb03",
      "name": "Prepare Tasks for API",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [160, 128],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.ticktick.com/open/v1/task",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"title\": {{ JSON.stringify($json.title) }},\n  \"content\": {{ JSON.stringify($json.content) }},\n  \"projectId\": {{ JSON.stringify($json.projectId) }},\n  \"dueDate\": {{ JSON.stringify($json.dueDate) }},\n  \"priority\": {{ $json.priority }},\n  \"timeZone\": {{ JSON.stringify($json.timeZone) }},\n  \"reminders\": {{ JSON.stringify($json.reminders) }}\n}\n",
        "options": {}
      },
      "id": "f6e0d663-972f-4f17-8906-232508689694",
      "name": "Create TickTick Task",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [368, 128],
      "credentials": {
        "oAuth2Api": {
          "id": "0nE0TkBrwzqPiuMc",
          "name": "TickTick"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Successfully processed Fireflies transcript\",\n  \"summary\": {\n    \"tasksCreated\": {{ $('Create TickTick Task').all().length }},\n    \"projects\": {{ JSON.stringify($('Create TickTick Task').all().map(item => item.json._metadata?.projectName || 'Unknown').filter((v, i, a) => a.indexOf(v) === i)) }}\n  },\n  \"tasks\": {{ JSON.stringify($('Create TickTick Task').all().map(item => ({\n    id: item.json.id,\n    title: item.json.title,\n    project: item.json._metadata?.projectName,\n    dueDate: item.json.dueDate,\n    priority: item.json.priority\n  }))) }}\n}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "b3ee7afb-f94b-4bd6-91e5-83e70faf16e0",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [560, 128]
    },
    {
      "parameters": {
        "content": "## Fireflies to TickTick OAuth2 Workflow\n\n### Setup Instructions:\n\n1. **TickTick OAuth2 Credential**:\n   - Create new OAuth2 API credential\n   - Authorization URL: `https://ticktick.com/oauth/authorize`\n   - Access Token URL: `https://ticktick.com/oauth/token`\n   - Scope: `tasks:read tasks:write`\n   - Client ID: `ytK7UMAD17MVlO8Mj8`\n   - Client Secret: `8IZ8G+fs4E@L&p&0(+bDae&N!1(xg6qg`\n   - Authentication: Send as Basic Auth header\n   - Click \"Connect\" to authorize\n\n2. **OpenRouter Credential**:\n   - Create API Key credential\n   - Add your OpenRouter API key\n\n3. **Register Redirect URI**:\n   In TickTick Developer Center, add:\n   `https://n8n-simplifai.saavatar.xyz/rest/oauth2-credential/callback`\n\n### Features:\n- Automatic OAuth token management\n- Fetches all projects for intelligent task assignment\n- AI extracts tasks for Mohammed Khan (Mo/Redwan)\n- Smart priority and deadline assignment\n- Detailed webhook response with task summary\n\n### Webhook Format:\n```json\n{\n  \"transcript\": \"Meeting transcript text...\"\n}\n```\n\n### Webhook URL:\n`https://n8n-simplifai.saavatar.xyz/webhook/fireflies-webhook`",
        "height": 952,
        "width": 500,
        "color": 7
      },
      "id": "9f4e84a2-a1f7-48c0-a323-68997d67e9ce",
      "name": "Setup Instructions",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-688, 336]
    },
    {
      "parameters": {
        "model": "openai/gpt-5-mini",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [-48, 672],
      "id": "0a241c9e-93aa-4759-9c15-d53f7dfa91de",
      "name": "OpenRouter Chat Model1",
      "credentials": {
        "openRouterApi": {
          "id": "Dtio4gg1Ugl5jouc",
          "name": "OpenRouter Final"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Fireflies Webhook": {
      "main": [
        [
          {
            "node": "Get TickTick Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get TickTick Projects": {
      "main": [
        [
          {
            "node": "Combine Data for AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data for AI": {
      "main": [
        [
          {
            "node": "Extract Tasks with AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Tasks with AI": {
      "main": [
        [
          {
            "node": "Prepare Tasks for API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Extract Tasks with AI",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Extract Tasks with AI",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Tasks for API": {
      "main": [
        [
          {
            "node": "Create TickTick Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create TickTick Task": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "98d13ca6-f293-47dd-a0ab-29bb53d83c4d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "09dac3b1fd535c8a2e81b8c333863b71134f03a2d7b0c5fb38cc1b81fda4ce0b"
  },
  "id": "83izEXettbLE3AIa",
  "tags": []
}
